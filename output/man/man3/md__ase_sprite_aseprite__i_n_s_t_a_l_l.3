.TH "md__ase_sprite_aseprite__i_n_s_t_a_l_l" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite__i_n_s_t_a_l_l \- \fBTable\fP of contents 
.PP

.IP "\(bu" 2
\fBPlatforms\fP
.IP "\(bu" 2
\fBGet the source code\fP
.IP "\(bu" 2
\fBDependencies\fP
.IP "  \(bu" 4
\fBWindows dependencies\fP
.IP "  \(bu" 4
\fBmacOS dependencies\fP
.IP "  \(bu" 4
\fBLinux dependencies\fP
.PP

.IP "\(bu" 2
\fBCompiling\fP
.IP "  \(bu" 4
\fBWindows details\fP
.IP "    \(bu" 6
\fBMinGW\fP
.PP

.IP "  \(bu" 4
\fBmacOS details\fP
.IP "    \(bu" 6
\fBIssues with Retina displays\fP
.PP

.IP "  \(bu" 4
\fBLinux details\fP
.PP

.IP "\(bu" 2
\fBUsing shared third party libraries\fP
.PP
.SH "Platforms"
.PP
You should be able to compile Aseprite successfully on the following platforms:
.PP
.IP "\(bu" 2
Windows 11 + \fCVisual Studio Community 2022 + Windows 10\&.0 SDK (the latest version available)\fP (we don't support \fBMinGW\fP)
.IP "\(bu" 2
macOS 13\&.0\&.1 Ventura + Xcode 14\&.1 + macOS 11\&.3 SDK (older version might work)
.IP "\(bu" 2
Linux Ubuntu Bionic 18\&.04 + clang 10\&.0
.PP
.SH "Get the source code"
.PP
You can get the source code downloading a \fCAseprite-v1\&.x-Source\&.zip\fP file from the latest Aseprite release (\fIin that case please follow the compilation instructions inside the \fC\&.zip\fP file\fP):
.PP
https://github.com/aseprite/aseprite/releases
.PP
Or you can clone the repository and all its submodules using the following command: 
.PP
.nf
git clone --recursive https://github\&.com/aseprite/aseprite\&.git

.fi
.PP
 To update an existing clone you can use the following commands: 
.PP
.nf
cd aseprite
git pull
git submodule update --init --recursive

.fi
.PP
 You can use \fCGit for Windows\fP to clone the repository on Windows\&.
.SH "Dependencies"
.PP
To compile Aseprite you will need:
.PP
.IP "\(bu" 2
The latest version of \fCCMake\fP (3\&.16 or greater)
.IP "\(bu" 2
\fCNinja\fP build system
.IP "\(bu" 2
And a compiled version of the \fCaseprite-m102\fP branch of the \fCSkia library\fP\&. There are \fCpre-built packages available\fP\&. You can get some extra information in the \fC\fIlaf\fP dependencies\fP page\&.
.PP
.SS "Windows dependencies"
.IP "\(bu" 2
Windows 10 (we don't support cross-compiling)
.IP "\(bu" 2
\fCVisual Studio Community 2022\fP (we don't support \fBMinGW\fP)
.IP "\(bu" 2
The \fCDesktop development with C++ item + Windows 10\&.0\&.18362\&.0 SDK\fP from the Visual Studio installer
.PP
.SS "macOS dependencies"
On macOS you will need macOS 11\&.3 SDK and Xcode 13\&.1 (older versions might work)\&.
.SS "Linux dependencies"
You will need the following dependencies on Ubuntu/Debian: 
.PP
.nf
sudo apt-get install -y g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

.fi
.PP
 Or use clang-10 packages (or newer) in case that clang in your distribution is older than clang 10\&.0: 
.PP
.nf
sudo apt-get install -y clang-10 libc++-10-dev libc++abi-10-dev

.fi
.PP
 On Fedora: 
.PP
.nf
sudo dnf install -y gcc-c++ clang libcxx-devel cmake ninja-build libX11-devel libXcursor-devel libXi-devel mesa-libGL-devel fontconfig-devel

.fi
.PP
 On Arch: 
.PP
.nf
sudo pacman -S gcc clang libc++ cmake ninja libx11 libxcursor mesa-libgl fontconfig

.fi
.PP
 On SUSE: 
.PP
.nf
sudo zypper install gcc-c++ clang libc++-devel libc++abi-devel cmake ninja libX11-devel libXcursor-devel libXi-devel Mesa-libGL-devel fontconfig-devel

.fi
.PP
 
.SH "Compiling"
.PP
.IP "1." 4
\fBGet Aseprite code\fP, put it in a folder like \fCC:\\aseprite\fP, and create a \fCbuild\fP directory inside to leave all the files that are result of the compilation process (\fC\&.exe\fP, \fC\&.lib\fP, \fC\&.obj\fP, \fC\&.a\fP, \fC\&.o\fP, etc)\&. 
.PP
.nf
 cd C:\\aseprite
 mkdir build

.fi
.PP
 In this way, if you want to start with a fresh copy of Aseprite source code, you can remove the \fCbuild\fP directory and start again\&.
.IP "2." 4
Enter in the new directory and execute \fCcmake\fP: 
.PP
.nf
 cd C:\\aseprite\\build
 cmake -G Ninja -DLAF_BACKEND=skia \&.\&.

.fi
.PP
 Here \fCcmake\fP needs different options depending on your platform\&. You must check the details for \fBWindows\fP, \fBmacOS\fP, and \fBLinux\fP\&. Some \fCcmake\fP options can be modified using tools like \fC\fCccmake\fP\fP or \fC\fCcmake-gui\fP\fP\&.
.IP "3." 4
After you have executed and configured \fCcmake\fP, you have to compile the project: 
.PP
.nf
 cd C:\\aseprite\\build
 ninja aseprite

.fi
.PP

.IP "4." 4
When \fCninja\fP finishes the compilation, you can find the executable inside \fCC:\\aseprite\\build\\bin\\aseprite\&.exe\fP\&.
.PP
.SS "Windows details"
Open a \fCdeveloper command prompt\fP or in the command line (\fCcmd\&.exe\fP) call: 
.PP
.nf
call 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd\&.bat' -arch=x64

.fi
.PP
 And then 
.PP
.nf
cd aseprite
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLAF_BACKEND=skia -DSKIA_DIR=C:\\deps\\skia -DSKIA_LIBRARY_DIR=C:\\deps\\skia\\out\\Release-x64 -DSKIA_LIBRARY=C:\\deps\\skia\\out\\Release-x64\\skia\&.lib -G Ninja \&.\&.
ninja aseprite

.fi
.PP
 In this case, \fCC:\\deps\\skia\fP is the directory where Skia was compiled or uncompressed\&.
.SS "MinGW"
We don't support MinGW compiler and it might bring some problems into the compilation process\&. If you see that the detected C++ compiler by cmake is \fCC:\\MinGW\\bin\\c++\&.exe\fP or something similar, you have to get rid of MinGW path (\fCC:\\MinGW\\bin\fP) from the \fCPATH\fP environment variable and run cmake again from scratch, so the Visual Studio C++ compiler (\fCcl\&.exe\fP) is used instead\&.
.PP
You can define the \fCCMAKE_IGNORE_PATH\fP variable when running cmake for the first time in case that you don't know or don't want to modify the \fCPATH\fP variable, e\&.g\&.: 
.PP
.nf
cmake -DCMAKE_IGNORE_PATH=C:\\MinGW\\bin \&.\&.\&.

.fi
.PP
 More information in \fCissue #2449\fP
.SS "macOS details"
Run \fCcmake\fP with the following parameters and then \fCninja\fP: 
.PP
.nf
cd aseprite
mkdir build
cd build
cmake \\
  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\
  -DCMAKE_OSX_ARCHITECTURES=x86_64 \\
  -DCMAKE_OSX_DEPLOYMENT_TARGET=10\&.9 \\
  -DCMAKE_OSX_SYSROOT=/Applications/Xcode\&.app/Contents/Developer/Platforms/MacOSX\&.platform/Developer/SDKs/MacOSX\&.sdk \\
  -DLAF_BACKEND=skia \\
  -DSKIA_DIR=$HOME/deps/skia \\
  -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \\
  -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia\&.a \\
  -G Ninja \\
  \&.\&.
ninja aseprite

.fi
.PP
 In this case, \fC$HOME/deps/skia\fP is the directory where Skia was compiled or downloaded\&. Make sure that \fCCMAKE_OSX_SYSROOT\fP is pointing to the correct SDK directory (in this case \fC/Applications/Xcode\&.app/Contents/Developer/Platforms/MacOSX\&.platform/Developer/SDKs/MacOSX\&.sdk\fP), but it could be different in your Mac\&.
.SS "Apple Silicon"
If you running macOS on an ARM64/AArch64/Apple Silicon Mac (e\&.g\&. M1), you can compile a native ARM64 version of Aseprite following the same steps as above but when we call \fCcmake\fP, we have some differences: 
.PP
.nf
cmake \\
  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\
  -DCMAKE_OSX_ARCHITECTURES=arm64 \\
  -DCMAKE_OSX_DEPLOYMENT_TARGET=11\&.0 \\
  -DCMAKE_OSX_SYSROOT=/Applications/Xcode\&.app/Contents/Developer/Platforms/MacOSX\&.platform/Developer/SDKs/MacOSX\&.sdk \\
  -DLAF_BACKEND=skia \\
  -DSKIA_DIR=$HOME/deps/skia \\
  -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-arm64 \\
  -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-arm64/libskia\&.a \\
  -DPNG_ARM_NEON:STRING=on \\
  -G Ninja \\
  \&.\&.

.fi
.PP
 
.SS "Issues with Retina displays"
If you have a Retina display, check the following issue:
.PP
https://github.com/aseprite/aseprite/issues/589
.SS "Linux details"
You need to use clang and libc++ to compile Aseprite: 
.PP
.nf
cd aseprite
mkdir build
cd build
export CC=clang
export CXX=clang++
cmake \\
  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\
  -DCMAKE_CXX_FLAGS:STRING=-stdlib=libc++ \\
  -DCMAKE_EXE_LINKER_FLAGS:STRING=-stdlib=libc++ \\
  -DLAF_BACKEND=skia \\
  -DSKIA_DIR=$HOME/deps/skia \\
  -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \\
  -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia\&.a \\
  -G Ninja \\
  \&.\&.
ninja aseprite

.fi
.PP
 In this case, \fC$HOME/deps/skia\fP is the directory where Skia was compiled or uncompressed\&.
.SS "GCC compiler"
In case that you are using the pre-compiled Skia version, you must use the clang compiler and libc++ to compile Aseprite\&. Only if you compile Skia with GCC, you will be able to compile Aseprite with GCC, and this is not recommended as you will have a performance penalty doing so\&.
.SH "Using shared third party libraries"
.PP
If you don't want to use the embedded code of third party libraries (i\&.e\&. to use your installed versions), you can disable static linking configuring each \fCUSE_SHARED_\fP option\&.
.PP
After running \fCcmake -G\fP, you can edit \fCbuild/CMakeCache\&.txt\fP file, and enable the \fCUSE_SHARED_\fP flag (set its value to \fCON\fP) of the library that you want to be linked dynamically\&. 
