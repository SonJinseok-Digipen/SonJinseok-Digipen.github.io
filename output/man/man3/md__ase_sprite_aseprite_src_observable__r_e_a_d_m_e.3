.TH "md__ase_sprite_aseprite_src_observable__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_src_observable__r_e_a_d_m_e \- \fBObservable\fP Library 
.PP
\fICopyright (C) 2016-2021 David Capello\fP
.PP
\fC\fP \fC\fP
.PP
Library to use the observer pattern in C++11 programs with observable/observer classes or signals/slots\&.
.SH "Features"
.PP
.IP "\(bu" 2
Generate an observable notification/signal from multiple threads
.IP "\(bu" 2
Add/remove observers/slots from multiple threads
.IP "\(bu" 2
Erase/disconnect an observer/slot from the same observable notification/signal
.IP "\(bu" 2
\fBReconnect\fP an observer in the same notification
.PP
.SH "Observable"
.PP
An observable \fCWidget\fP:
.PP
.PP
.nf
#include "obs\&.h"

class WidgetObserver {
public:
  virtual ~WidgetObserver() = 0;
  virtual void onClick() { }
};

class Widget : public obs::observable<WidgetObserver> {
public:
  void processClick() {
    notify_observers(&WidgetObserver::onClick);
  }
};
.fi
.PP
.PP
An example
.PP
.PP
.nf
#include "obs\&.h"

class ObserveClick : public WidgetObserver {
public:
  void onClick() override {
    // Do something\&.\&.\&.
  }
};

\&.\&.\&.
ObserveClick observer;
Widget button;
button\&.add_observer(&observer);
.fi
.PP
.SH "Signal"
.PP
.PP
.nf
#include "obs\&.h"

int main() {
  obs::signal<void (int, int)> sig;
  sig\&.connect([](int x, int y){ \&.\&.\&. });
  sig(1, 2); // Generate signal
}
.fi
.PP
.SH "Tested Compilers"
.PP
.IP "\(bu" 2
Visual Studio 2015
.IP "\(bu" 2
Xcode 7\&.3\&.1 (\fC-std=c++11\fP)
.IP "\(bu" 2
GCC 4\&.8\&.4 (\fC-std=c++11\fP) 
.PP

