.TH "md__ase_sprite_aseprite_third_party_curl_tests_unit__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_curl_tests_unit__r_e_a_d_m_e \- Unit tests 
.PP
The goal is to add tests for \fIall\fP functions in libcurl\&. If functions are too big and complicated, we should split them into smaller and testable ones\&.
.SH "Build Unit Tests"
.PP
\fC\&./configure --enable-debug\fP is required for the unit tests to build\&. To enable unit tests, there will be a separate static libcurl built that will be used exclusively for linking unit test programs\&. Just build everything as normal, and then you can run the unit test cases as well\&.
.SH "Run Unit Tests"
.PP
Unit tests are run as part of the regular test suite\&. If you have built everything to run unit tests, to can do 'make test' at the root level\&. Or you can \fCcd tests\fP and \fCmake\fP and then invoke individual unit tests with \fC\&./runtests\&.pl NNNN\fP where \fCNNNN\fP is the specific test number\&.
.SH "Debug Unit Tests"
.PP
If a specific test fails you will get told\&. The test case then has output left in the log/ subdirectory, but most importantly you can re-run the test again using gdb by doing \fC\&./runtests\&.pl -g NNNN\fP\&. That is, add a \fC-g\fP to make it start up gdb and run the same case using that\&.
.SH "Write Unit Tests"
.PP
We put tests that focus on an area or a specific function into a single C source file\&. The source file should be named 'unitNNNN\&.c' where NNNN is a previously unused number\&.
.PP
Add your test to \fCtests/unit/Makefile\&.inc\fP (if it is a unit test)\&. Add your test data file name to \fCtests/data/Makefile\&.inc\fP
.PP
You also need a separate file called \fCtests/data/testNNNN\fP (using the same number) that describes your test case\&. See the test1300 file for inspiration and the \fCtests/FILEFORMAT\&.md\fP documentation\&.
.PP
For the actual C file, here's a very simple example: ~~~c #include 'curlcheck\&.h'
.PP
#include 'a libcurl header\&.h' /* from the lib dir */
.PP
static CURLcode unit_setup( void ) { /* whatever you want done first */ return CURLE_OK; }
.PP
static void unit_stop( void ) { /* done before shutting down and exiting */ }
.PP
UNITTEST_START
.PP
/* here you start doing things and checking that the results are good */
.PP
fail_unless( size == 0 , 'initial size should be zero' ); fail_if( head == NULL , 'head should not be initiated to NULL' );
.PP
/* you end the test code like this: */
.PP
UNITTEST_STOP 
