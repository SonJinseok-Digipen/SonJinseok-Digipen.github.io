.TH "md__ase_sprite_aseprite_tests_third_party_json__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_tests_third_party_json__r_e_a_d_m_e \-  
.PP
\fBA\fP lightweight JSON library for Lua
.SH "Features"
.PP
.IP "\(bu" 2
Implemented in pure Lua: works with 5\&.1, 5\&.2, 5\&.3 and JIT
.IP "\(bu" 2
Fast: generally outperforms other pure Lua JSON implementations (\fCbenchmark scripts\fP)
.IP "\(bu" 2
Tiny: around 280sloc, 9kb
.IP "\(bu" 2
Proper error messages, \fIeg:\fP `expected '}' or ',' at line 203 col 30`
.PP
.SH "Usage"
.PP
The \fCjson\&.lua\fP file should be dropped into an existing project and required by it: 
.PP
.nf
json = require "json"

.fi
.PP
 The library provides the following functions:
.SS "json\&.encode(value)"
Returns a string representing \fCvalue\fP encoded in JSON\&. 
.PP
.nf
json\&.encode({ 1, 2, 3, { x = 10 } }) \-\- Returns '[1,2,3,{"x":10}]'

.fi
.PP
.SS "json\&.decode(str)"
Returns a value representing the decoded JSON string\&. 
.PP
.nf
json\&.decode('[1,2,3,{"x":10}]') \-\- Returns { 1, 2, 3, { x = 10 } }

.fi
.PP
.SH "Notes"
.PP
.IP "\(bu" 2
Trying to encode values which are unrepresentable in JSON will never result in type conversion or other magic: sparse arrays, tables with mixed key types or invalid numbers (NaN, -inf, inf) will raise an error
.IP "\(bu" 2
\fCnull\fP values contained within an array or object are converted to \fCnil\fP and are therefore lost upon decoding
.IP "\(bu" 2
\fIPretty\fP encoding is not supported, \fCjson\&.encode()\fP only encodes to a compact format
.PP
.SH "License"
.PP
This library is free software; you can redistribute it and/or modify it under the terms of the MIT license\&. See [LICENSE](LICENSE) for details\&. 
