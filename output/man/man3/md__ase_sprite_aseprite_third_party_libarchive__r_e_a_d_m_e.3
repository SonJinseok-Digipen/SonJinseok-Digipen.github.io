.TH "md__ase_sprite_aseprite_third_party_libarchive__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_libarchive__r_e_a_d_m_e \- Welcome to libarchive! 
.PP
The libarchive project develops a portable, efficient C library that can read and write streaming archives in a variety of formats\&. It also includes implementations of the common \fCtar\fP, \fCcpio\fP, and \fCzcat\fP command-line tools that use the libarchive library\&.
.SH "Questions?  Issues?"
.PP
.IP "\(bu" 2
http://www.libarchive.org is the home for ongoing libarchive development, including documentation, and links to the libarchive mailing lists\&.
.IP "\(bu" 2
To report an issue, use the issue tracker at https://github.com/libarchive/libarchive/issues
.IP "\(bu" 2
To submit an enhancement to libarchive, please submit a pull request via GitHub: https://github.com/libarchive/libarchive/pulls
.PP
.SH "Contents of the Distribution"
.PP
This distribution bundle includes the following major components:
.PP
.IP "\(bu" 2
\fBlibarchive\fP: a library for reading and writing streaming archives
.IP "\(bu" 2
\fBtar\fP: the 'bsdtar' program is a full-featured 'tar' implementation built on libarchive
.IP "\(bu" 2
\fBcpio\fP: the 'bsdcpio' program is a different interface to essentially the same functionality
.IP "\(bu" 2
\fBcat\fP: the 'bsdcat' program is a simple replacement tool for zcat, bzcat, xzcat, and such
.IP "\(bu" 2
\fBexamples\fP: Some small example programs that you may find useful\&.
.IP "\(bu" 2
\fBexamples/minitar\fP: a compact sample demonstrating use of libarchive\&.
.IP "\(bu" 2
\fBcontrib\fP: Various items sent to me by third parties; please contact the authors with any questions\&.
.PP
.PP
The top-level directory contains the following information files:
.PP
.IP "\(bu" 2
\fBNEWS\fP - highlights of recent changes
.IP "\(bu" 2
\fBCOPYING\fP - what you can do with this
.IP "\(bu" 2
\fBINSTALL\fP - installation instructions
.IP "\(bu" 2
\fBREADME\fP - this file
.IP "\(bu" 2
\fBCMakeLists\&.txt\fP - input for 'cmake' build tool, see INSTALL
.IP "\(bu" 2
\fBconfigure\fP - configuration script, see INSTALL for details\&. If your copy of the source lacks a \fCconfigure\fP script, you can try to construct it by running the script in \fCbuild/autogen\&.sh\fP (or use \fCcmake\fP)\&.
.PP
.PP
The following files in the top-level directory are used by the 'configure' script:
.PP
.IP "\(bu" 2
\fCMakefile\&.am\fP, \fCaclocal\&.m4\fP, \fCconfigure\&.ac\fP - used to build this distribution, only needed by maintainers
.IP "\(bu" 2
\fCMakefile\&.in\fP, \fCconfig\&.h\&.in\fP - templates used by configure script
.PP
.SH "Documentation"
.PP
In addition to the informational articles and documentation in the online \fClibarchive Wiki\fP, the distribution also includes a number of manual pages:
.PP
.IP "\(bu" 2
bsdtar\&.1 explains the use of the bsdtar program
.IP "\(bu" 2
bsdcpio\&.1 explains the use of the bsdcpio program
.IP "\(bu" 2
bsdcat\&.1 explains the use of the bsdcat program
.IP "\(bu" 2
libarchive\&.3 gives an overview of the library as a whole
.IP "\(bu" 2
archive_read\&.3, archive_write\&.3, archive_write_disk\&.3, and archive_read_disk\&.3 provide detailed calling sequences for the read and write APIs
.IP "\(bu" 2
archive_entry\&.3 details the 'struct archive_entry' utility class
.IP "\(bu" 2
archive_internals\&.3 provides some insight into libarchive's internal structure and operation\&.
.IP "\(bu" 2
libarchive-formats\&.5 documents the file formats supported by the library
.IP "\(bu" 2
cpio\&.5, mtree\&.5, and tar\&.5 provide detailed information about these popular archive formats, including hard-to-find details about modern cpio and tar variants\&.
.PP
.PP
The manual pages above are provided in the 'doc' directory in a number of different formats\&.
.PP
You should also read the copious comments in \fC\fBarchive\&.h\fP\fP and the source code for the sample programs for more details\&. Please let us know about any errors or omissions you find\&.
.SH "Supported Formats"
.PP
Currently, the library automatically detects and reads the following formats:
.PP
.IP "\(bu" 2
Old V7 tar archives
.IP "\(bu" 2
POSIX ustar
.IP "\(bu" 2
GNU tar format (including GNU long filenames, long link names, and sparse files)
.IP "\(bu" 2
Solaris 9 extended tar format (including ACLs)
.IP "\(bu" 2
POSIX pax interchange format
.IP "\(bu" 2
POSIX octet-oriented cpio
.IP "\(bu" 2
SVR4 ASCII cpio
.IP "\(bu" 2
Binary cpio (big-endian or little-endian)
.IP "\(bu" 2
PWB binary cpio
.IP "\(bu" 2
ISO9660 CD-ROM images (with optional Rockridge or Joliet extensions)
.IP "\(bu" 2
ZIP archives (with uncompressed or 'deflate' compressed entries, including support for encrypted Zip archives)
.IP "\(bu" 2
ZIPX archives (with support for bzip2, ppmd8, lzma and xz compressed entries)
.IP "\(bu" 2
GNU and BSD 'ar' archives
.IP "\(bu" 2
'mtree' format
.IP "\(bu" 2
7-Zip archives
.IP "\(bu" 2
Microsoft CAB format
.IP "\(bu" 2
LHA and LZH archives
.IP "\(bu" 2
RAR and RAR 5\&.0 archives (with some limitations due to RAR's proprietary status)
.IP "\(bu" 2
XAR archives
.PP
.PP
The library also detects and handles any of the following before evaluating the archive:
.PP
.IP "\(bu" 2
uuencoded files
.IP "\(bu" 2
files with RPM wrapper
.IP "\(bu" 2
gzip compression
.IP "\(bu" 2
bzip2 compression
.IP "\(bu" 2
compress/LZW compression
.IP "\(bu" 2
lzma, lzip, and xz compression
.IP "\(bu" 2
lz4 compression
.IP "\(bu" 2
lzop compression
.IP "\(bu" 2
zstandard compression
.PP
.PP
The library can create archives in any of the following formats:
.PP
.IP "\(bu" 2
POSIX ustar
.IP "\(bu" 2
POSIX pax interchange format
.IP "\(bu" 2
'restricted' pax format, which will create ustar archives except for entries that require pax extensions (for long filenames, ACLs, etc)\&.
.IP "\(bu" 2
Old GNU tar format
.IP "\(bu" 2
Old V7 tar format
.IP "\(bu" 2
POSIX octet-oriented cpio
.IP "\(bu" 2
SVR4 'newc' cpio
.IP "\(bu" 2
Binary cpio (little-endian)
.IP "\(bu" 2
PWB binary cpio
.IP "\(bu" 2
shar archives
.IP "\(bu" 2
ZIP archives (with uncompressed or 'deflate' compressed entries)
.IP "\(bu" 2
GNU and BSD 'ar' archives
.IP "\(bu" 2
'mtree' format
.IP "\(bu" 2
ISO9660 format
.IP "\(bu" 2
7-Zip archives
.IP "\(bu" 2
XAR archives
.PP
.PP
When creating archives, the result can be filtered with any of the following:
.PP
.IP "\(bu" 2
uuencode
.IP "\(bu" 2
gzip compression
.IP "\(bu" 2
bzip2 compression
.IP "\(bu" 2
compress/LZW compression
.IP "\(bu" 2
lzma, lzip, and xz compression
.IP "\(bu" 2
lz4 compression
.IP "\(bu" 2
lzop compression
.IP "\(bu" 2
zstandard compression
.PP
.SH "Notes about the Library Design"
.PP
The following notes address many of the most common questions we are asked about libarchive:
.PP
.IP "\(bu" 2
This is a heavily stream-oriented system\&. That means that it is optimized to read or write the archive in a single pass from beginning to end\&. For example, this allows libarchive to process archives too large to store on disk by processing them on-the-fly as they are read from or written to a network or tape drive\&. This also makes libarchive useful for tools that need to produce archives on-the-fly (such as webservers that provide archived contents of a users account)\&.
.IP "\(bu" 2
In-place modification and random access to the contents of an archive are not directly supported\&. For some formats, this is not an issue: For example, tar\&.gz archives are not designed for random access\&. In some other cases, libarchive can re-open an archive and scan it from the beginning quickly enough to provide the needed abilities even without true random access\&. Of course, some applications do require true random access; those applications should consider alternatives to libarchive\&.
.IP "\(bu" 2
The library is designed to be extended with new compression and archive formats\&. The only requirement is that the format be readable or writable as a stream and that each archive entry be independent\&. There are articles on the libarchive Wiki explaining how to extend libarchive\&.
.IP "\(bu" 2
On read, compression and format are always detected automatically\&.
.IP "\(bu" 2
The same API is used for all formats; it should be very easy for software using libarchive to transparently handle any of libarchive's archiving formats\&.
.IP "\(bu" 2
Libarchive's automatic support for decompression can be used without archiving by explicitly selecting the 'raw' and 'empty' formats\&.
.IP "\(bu" 2
I've attempted to minimize static link pollution\&. If you don't explicitly invoke a particular feature (such as support for a particular compression or format), it won't get pulled in to statically-linked programs\&. In particular, if you don't explicitly enable a particular compression or decompression support, you won't need to link against the corresponding compression or decompression libraries\&. This also reduces the size of statically-linked binaries in environments where that matters\&.
.IP "\(bu" 2
The library is generally \fIthread safe\fP depending on the platform: it does not define any global variables of its own\&. However, some platforms do not provide fully thread-safe versions of key C library functions\&. On those platforms, libarchive will use the non-thread-safe functions\&. Patches to improve this are of great interest to us\&.
.IP "\(bu" 2
In particular, libarchive's modules to read or write a directory tree do use \fCchdir()\fP to optimize the directory traversals\&. This can cause problems for programs that expect to do disk access from multiple threads\&. Of course, those modules are completely optional and you can use the rest of libarchive without them\&.
.IP "\(bu" 2
The library is \fInot\fP thread aware, however\&. It does no locking or thread management of any kind\&. If you create a libarchive object and need to access it from multiple threads, you will need to provide your own locking\&.
.IP "\(bu" 2
On read, the library accepts whatever blocks you hand it\&. Your read callback is free to pass the library a byte at a time or mmap the entire archive and give it to the library at once\&. On write, the library always produces correctly-blocked output\&.
.IP "\(bu" 2
The object-style approach allows you to have multiple archive streams open at once\&. bsdtar uses this in its '@archive' extension\&.
.IP "\(bu" 2
The archive itself is read/written using callback functions\&. You can read an archive directly from an in-memory buffer or write it to a socket, if you wish\&. There are some utility functions to provide easy-to-use 'open file,' etc, capabilities\&.
.IP "\(bu" 2
The read/write APIs are designed to allow individual entries to be read or written to any data source: You can create a block of data in memory and add it to a tar archive without first writing a temporary file\&. You can also read an entry from an archive and write the data directly to a socket\&. If you want to read/write entries to disk, there are convenience functions to make this especially easy\&.
.IP "\(bu" 2
Note: The 'pax interchange format' is a POSIX standard extended tar format that should be used when the older \fIustar\fP format is not appropriate\&. It has many advantages over other tar formats (including the legacy GNU tar format) and is widely supported by current tar implementations\&. 
.PP

