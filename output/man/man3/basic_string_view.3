.TH "basic_string_view< Char >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_string_view< Char >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <core\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBvalue_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = const Char *"
.br
.ti -1c
.RI "using \fBvalue_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = const Char *"
.br
.ti -1c
.RI "using \fBvalue_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = const Char *"
.br
.ti -1c
.RI "using \fBvalue_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = const Char *"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBbasic_string_view\fP (const Char *s, size_t count) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP (const Char *s)"
.br
.ti -1c
.RI "template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP (const std::basic_string< Char, Traits, Alloc > &s) noexcept"
.br
.ti -1c
.RI "template<typename S , FMT_ENABLE_IF(std::is_same< S, detail::std_string_view< Char > >\fB::value\fP) > FMT_CONSTEXPR \fBbasic_string_view\fP (S s) noexcept"
.br
.ti -1c
.RI "constexpr auto \fBdata\fP () const noexcept \-> const Char *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBoperator[]\fP (size_t pos) const noexcept \-> const Char &"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBremove_prefix\fP (size_t n) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS bool \fBstarts_with\fP (\fBbasic_string_view\fP< Char > sv) const noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS bool \fBstarts_with\fP (Char c) const noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS bool \fBstarts_with\fP (const Char *s) const"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS auto \fBcompare\fP (\fBbasic_string_view\fP other) const \-> int"
.br
.ti -1c
.RI "constexpr \fBbasic_string_view\fP (const Char *s, size_t count) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP (const Char *s)"
.br
.ti -1c
.RI "template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP (const std::basic_string< Char, Traits, Alloc > &s) noexcept"
.br
.ti -1c
.RI "template<typename S , FMT_ENABLE_IF(std::is_same< S, detail::std_string_view< Char > >\fB::value\fP) > FMT_CONSTEXPR \fBbasic_string_view\fP (S s) noexcept"
.br
.ti -1c
.RI "constexpr auto \fBdata\fP () const noexcept \-> const Char *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBoperator[]\fP (size_t pos) const noexcept \-> const Char &"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBremove_prefix\fP (size_t n) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS auto \fBcompare\fP (\fBbasic_string_view\fP other) const \-> int"
.br
.ti -1c
.RI "constexpr \fBbasic_string_view\fP (const Char *s, size_t count) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP (const Char *s)"
.br
.ti -1c
.RI "template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP (const std::basic_string< Char, Traits, Alloc > &s) noexcept"
.br
.ti -1c
.RI "template<typename S , FMT_ENABLE_IF(std::is_same< S, detail::std_string_view< Char > >\fB::value\fP) > FMT_CONSTEXPR \fBbasic_string_view\fP (S s) noexcept"
.br
.ti -1c
.RI "constexpr auto \fBdata\fP () const noexcept \-> const Char *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBoperator[]\fP (size_t pos) const noexcept \-> const Char &"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBremove_prefix\fP (size_t n) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS auto \fBcompare\fP (\fBbasic_string_view\fP other) const \-> int"
.br
.ti -1c
.RI "constexpr \fBbasic_string_view\fP (const Char *s, size_t count) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP (const Char *s)"
.br
.ti -1c
.RI "template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP (const std::basic_string< Char, Traits, Alloc > &s) noexcept"
.br
.ti -1c
.RI "template<typename S , FMT_ENABLE_IF(std::is_same< S, detail::std_string_view< Char > >\fB::value\fP) > FMT_CONSTEXPR \fBbasic_string_view\fP (S s) noexcept"
.br
.ti -1c
.RI "constexpr auto \fBdata\fP () const noexcept \-> const Char *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBoperator[]\fP (size_t pos) const noexcept \-> const Char &"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBremove_prefix\fP (size_t n) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS auto \fBcompare\fP (\fBbasic_string_view\fP other) const \-> int"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS friend auto \fBoperator==\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator!=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS friend auto \fBoperator==\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator!=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS friend auto \fBoperator==\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator!=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "FMT_CONSTEXPR_CHAR_TRAITS friend auto \fBoperator==\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator!=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator<=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator>=\fP (\fBbasic_string_view\fP lhs, \fBbasic_string_view\fP rhs) \-> bool"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Char>
.br
class basic_string_view< Char >"An implementation of \fCstd::basic_string_view\fP for pre-C++17\&. It provides a subset of the API\&. \fCfmt::basic_string_view\fP is used for format strings even if \fCstd::string_view\fP is available to prevent issues when a library is compiled with a different \fC-std\fP option than the client code (which is not recommended)\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Char > constexpr \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s, size_t count)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Constructs a string reference object from a C string and a size\&. 
.SS "template<typename Char > FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s)\fC [inline]\fP"
\\rst Constructs a string reference object from a C string computing the size with \fCstd::char_traits<Char>::length\fP\&. \\endrst 
.SS "template<typename Char > template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const std::basic_string< Char, Traits, Alloc > & s)\fC [inline]\fP, \fC [noexcept]\fP"
Constructs a string reference from a \fCstd::basic_string\fP object\&. 
.SS "template<typename Char > constexpr \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s, size_t count)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Constructs a string reference object from a C string and a size\&. 
.SS "template<typename Char > FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s)\fC [inline]\fP"
\\rst Constructs a string reference object from a C string computing the size with \fCstd::char_traits<Char>::length\fP\&. \\endrst 
.SS "template<typename Char > template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const std::basic_string< Char, Traits, Alloc > & s)\fC [inline]\fP, \fC [noexcept]\fP"
Constructs a string reference from a \fCstd::basic_string\fP object\&. 
.SS "template<typename Char > constexpr \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s, size_t count)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Constructs a string reference object from a C string and a size\&. 
.SS "template<typename Char > FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s)\fC [inline]\fP"
\\rst Constructs a string reference object from a C string computing the size with \fCstd::char_traits<Char>::length\fP\&. \\endrst 
.SS "template<typename Char > template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const std::basic_string< Char, Traits, Alloc > & s)\fC [inline]\fP, \fC [noexcept]\fP"
Constructs a string reference from a \fCstd::basic_string\fP object\&. 
.SS "template<typename Char > constexpr \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s, size_t count)\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Constructs a string reference object from a C string and a size\&. 
.SS "template<typename Char > FMT_CONSTEXPR_CHAR_TRAITS FMT_INLINE \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const Char * s)\fC [inline]\fP"
\\rst Constructs a string reference object from a C string computing the size with \fCstd::char_traits<Char>::length\fP\&. \\endrst 
.SS "template<typename Char > template<typename Traits , typename Alloc > FMT_CONSTEXPR \fBbasic_string_view\fP< Char >\fB::basic_string_view\fP (const std::basic_string< Char, Traits, Alloc > & s)\fC [inline]\fP, \fC [noexcept]\fP"
Constructs a string reference from a \fCstd::basic_string\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >\fB::data\fP () const \-> const Char* \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns a pointer to the string data\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >\fB::data\fP () const \-> const Char* \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns a pointer to the string data\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >\fB::data\fP () const \-> const Char* \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns a pointer to the string data\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >\fB::data\fP () const \-> const Char* \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns a pointer to the string data\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >::size () const \-> size_t \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns the string size\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >::size () const \-> size_t \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns the string size\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >::size () const \-> size_t \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns the string size\&. 
.SS "template<typename Char > constexpr auto \fBbasic_string_view\fP< Char >::size () const \-> size_t \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns the string size\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
