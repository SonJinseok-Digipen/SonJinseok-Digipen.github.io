.TH "has_format_as< T >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
has_format_as< T >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum { \fBvalue\fP = decltype(check(static_cast<T*>(nullptr)))::value }"
.br
.ti -1c
.RI "enum { \fBvalue\fP = decltype(check(static_cast<T*>(nullptr)))::value }"
.br
.ti -1c
.RI "enum { \fBvalue\fP = decltype(check(static_cast<T*>(nullptr)))::value }"
.br
.ti -1c
.RI "enum { \fBvalue\fP = decltype(check(static_cast<T*>(nullptr)))::value }"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename U , typename V  = decltype(format_as(U())), FMT_ENABLE_IF(std::is_enum< U >\fB::value\fP &&std::is_integral< V >\fB::value\fP) > static auto \fBcheck\fP (U *) \-> std::true_type"
.br
.ti -1c
.RI "static auto \fBcheck\fP (\&.\&.\&.) \-> std::false_type"
.br
.ti -1c
.RI "template<typename U , typename V  = decltype(format_as(U())), FMT_ENABLE_IF(std::is_enum< U >\fB::value\fP &&std::is_integral< V >\fB::value\fP) > static auto \fBcheck\fP (U *) \-> std::true_type"
.br
.ti -1c
.RI "static auto \fBcheck\fP (\&.\&.\&.) \-> std::false_type"
.br
.ti -1c
.RI "template<typename U , typename V  = decltype(format_as(U())), FMT_ENABLE_IF(std::is_enum< U >\fB::value\fP &&std::is_integral< V >\fB::value\fP) > static auto \fBcheck\fP (U *) \-> std::true_type"
.br
.ti -1c
.RI "static auto \fBcheck\fP (\&.\&.\&.) \-> std::false_type"
.br
.ti -1c
.RI "template<typename U , typename V  = decltype(format_as(U())), FMT_ENABLE_IF(std::is_enum< U >\fB::value\fP &&std::is_integral< V >\fB::value\fP) > static auto \fBcheck\fP (U *) \-> std::true_type"
.br
.ti -1c
.RI "static auto \fBcheck\fP (\&.\&.\&.) \-> std::false_type"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
