.TH "md__ase_sprite_aseprite_third_party_curl_tests__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_curl_tests__r_e_a_d_m_e \- The curl \fBTest\fP Suite 
.PP

.SH "Running"
.PP
.SS "Requires to run"
.IP "\(bu" 2
perl (and a unix-style shell)
.IP "\(bu" 2
python (and a unix-style shell, for SMB and \fBTELNET\fP tests)
.IP "\(bu" 2
python-impacket (for SMB tests)
.IP "\(bu" 2
diff (when a test fails, a diff is shown)
.IP "\(bu" 2
stunnel (for HTTPS and FTPS tests)
.IP "\(bu" 2
OpenSSH or SunSSH (for SCP, SFTP and SOCKS4/5 tests)
.IP "\(bu" 2
nghttpx (for HTTP/2 tests)
.IP "\(bu" 2
nroff (for --manual tests)
.IP "\(bu" 2
An available \fCen_US\&.UTF-8\fP locale
.PP
.SS "Installation of python-impacket"
The Python-based test servers support both recent Python 2 and 3\&. You can figure out your default Python interpreter with python -V
.PP
Please install python-impacket in the correct Python environment\&. You can use pip or your OS' package manager to install 'impacket'\&.
.PP
On Debian/Ubuntu the package names are:
.PP
.IP "\(bu" 2
Python 2: 'python-impacket'
.IP "\(bu" 2
Python 3: 'python3-impacket'
.PP
.PP
On FreeBSD the package names are:
.PP
.IP "\(bu" 2
Python 2: 'py27-impacket'
.IP "\(bu" 2
Python 3: 'py37-impacket'
.PP
.PP
On any system where pip is available:
.PP
.IP "\(bu" 2
Python 2: 'pip2 install impacket'
.IP "\(bu" 2
Python 3: 'pip3 install impacket'
.PP
.PP
You may also need to manually install the Python package 'six' as that may be a missing requirement for impacket on Python 3\&.
.SS "Port numbers used by test servers"
All test servers run on 'random' port numbers\&. All tests should be written to use suitable variables instead of fixed port numbers so that test cases continue to work independent on what port numbers the test servers actually use\&.
.PP
See \fBFILEFORMAT\fP for the port number variables\&.
.SS "Test servers"
The test suite runs stand-alone servers on random ports to which it makes requests\&. For SSL tests, it runs stunnel to handle encryption to the regular servers\&. For SSH, it runs a standard OpenSSH server\&. For SOCKS4/5 tests SSH is used to perform the SOCKS functionality and requires a SSH client and server\&.
.PP
The listen port numbers for the test servers are picked randomly to allow users to run multiple test cases concurrently and to not collide with other existing services that might listen to ports on the machine\&.
.PP
The \fBHTTP\fP server supports listening on a Unix domain socket, the default location is 'http\&.sock'\&.
.SS "Run"
\fC\&./configure && make && make test\fP\&. This builds the test suite support code and invokes the 'runtests\&.pl' perl script to run all the tests\&. Edit the top variables of that script in case you have some specific needs, or run the script manually (after the support code has been built)\&.
.PP
The script breaks on the first test that doesn't do OK\&. Use \fC-a\fP to prevent the script from aborting on the first error\&. Run the script with \fC-v\fP for more verbose output\&. Use \fC-d\fP to run the test servers with debug output enabled as well\&. Specifying \fC-k\fP keeps all the log files generated by the test intact\&.
.PP
Use \fC-s\fP for shorter output, or pass test numbers to run specific tests only (like \fC\&./runtests\&.pl 3 4\fP to test 3 and 4 only)\&. It also supports test case ranges with 'to', as in \fC\&./runtests\&.pl 3 to 9\fP which runs the seven tests from 3 to 9\&. Any test numbers starting with ! are disabled, as are any test numbers found in the files \fCdata/DISABLED\fP or \fCdata/DISABLED\&.local\fP (one per line)\&. The latter is meant for local temporary disables and will be ignored by git\&.
.PP
\fBTest\fP cases mentioned in \fCDISABLED\fP can still be run if \fC-f\fP is provided\&.
.PP
When \fC-s\fP is not present, each successful test will display on one line the test number and description and on the next line a set of flags, the test result, current test sequence, total number of tests to be run and an estimated amount of time to complete the test run\&. The flags consist of these letters describing what is checked in this test:
.PP
s stdout d data u upload p protocol o output e exit code m memory v valgrind
.SS "Shell startup scripts"
Tests which use the ssh test server, SCP/SFTP/SOCKS tests, might be badly influenced by the output of system wide or user specific shell startup scripts, \&.bashrc, \&.profile, /etc/csh\&.cshrc, \&.login, /etc/bashrc, etc\&. which output text messages or escape sequences on user login\&. When these shell startup messages or escape sequences are output they might corrupt the expected stream of data which flows to the sftp-server or from the ssh client which can result in bad test behavior or even prevent the test server from running\&.
.PP
If the test suite ssh or sftp server fails to start up and logs the message 'Received message too long' then you are certainly suffering the unwanted output of a shell startup script\&. Locate, cleanup or adjust the shell script\&.
.SS "Memory test"
The test script will check that all allocated memory is freed properly IF curl has been built with the \fCCURLDEBUG\fP define set\&. The script will automatically detect if that is the case, and it will use the 'memanalyze\&.pl' script to analyze the memory debugging output\&.
.PP
Also, if you run tests on a machine where valgrind is found, the script will use valgrind to run the test with (unless you use \fC-n\fP) to further verify correctness\&.
.PP
runtests\&.pl's \fC-t\fP option will enable torture testing mode, which runs each test many times and makes each different memory allocation fail on each successive run\&. This tests the out of memory error handling code to ensure that memory leaks do not occur even in those situations\&. It can help to compile curl with \fCCPPFLAGS=-DMEMDEBUG_LOG_SYNC\fP when using this option, to ensure that the memory log file is properly written even if curl crashes\&.
.SS "Debug"
If a test case fails, you can conveniently get the script to invoke the debugger (gdb) for you with the server running and the exact same command line parameters that failed\&. Just invoke \fCruntests\&.pl <test number> -g\fP and then just type 'run' in the debugger to perform the command through the debugger\&.
.SS "Logs"
All logs are generated in the log/ subdirectory (it is emptied first in the runtests\&.pl script)\&. They remain in there after a test run\&.
.SS "Test input files"
All test cases are put in the \fCdata/\fP subdirectory\&. Each test is stored in the file named according to the test number\&.
.PP
See \fBFILEFORMAT\&.md\fP for a description of the test case file format\&.
.SS "Code coverage"
gcc provides a tool that can determine the code coverage figures for the test suite\&. To use it, configure curl with `CFLAGS='-fprofile-arcs -ftest-coverage -g -O0'`\&. Make sure you run the normal and torture tests to get more full coverage, i\&.e\&. do:
.PP
make test make test-torture
.PP
The graphical tool ggcov can be used to browse the source and create coverage reports on *NIX hosts:
.PP
ggcov -r lib src
.PP
The text mode tool gcov may also be used, but it doesn't handle object files in more than one directory very well\&.
.SS "Remote testing"
The runtests\&.pl script provides some hooks to allow curl to be tested on a machine where perl can not be run\&. The test framework in this case runs on a workstation where perl is available, while curl itself is run on a remote system using ssh or some other remote execution method\&. See the comments at the beginning of runtests\&.pl for details\&.
.SS "Test case numbering"
\fBTest\fP cases used to be numbered by category ranges, but the ranges filled up\&. Subsets of tests can now be selected by passing keywords to the runtests\&.pl script via the make \fCTFLAGS\fP variable\&.
.PP
New tests are added by finding a free number in \fCtests/data/Makefile\&.inc\fP\&.
.SS "Write tests"
Here's a quick description on writing test cases\&. We basically have three kinds of tests: the ones that test the curl tool, the ones that build small applications and test libcurl directly and the unit tests that test individual (possibly internal) functions\&.
.SS "test data"
Each test has a master file that controls all the test data\&. What to read, what the protocol exchange should look like, what exit code to expect and what command line arguments to use etc\&.
.PP
These files are \fCtests/data/test[num]\fP where \fC[num]\fP is just a unique identifier described above, and the XML-like file format of them is described in the separate \fBFILEFORMAT\&.md\fP document\&.
.SS "curl tests"
\fBA\fP test case that runs the curl tool and verifies that it gets the correct data, it sends the correct data, it uses the correct protocol primitives etc\&.
.SS "libcurl tests"
The libcurl tests are identical to the curl ones, except that they use a specific and dedicated custom-built program to run instead of 'curl'\&. This tool is built from source code placed in \fCtests/libtest\fP and if you want to make a new libcurl test that is where you add your code\&.
.SS "unit tests"
Unit tests are placed in \fCtests/unit\fP\&. There's a tests/unit/README describing the specific set of checks and macros that may be used when writing tests that verify behaviors of specific individual functions\&.
.PP
The unit tests depend on curl being built with debug enabled\&. 
