.TH "md__ase_sprite_aseprite_laf__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_laf__r_e_a_d_m_e \- LAF: The Lost Application Framework 
.PP
\fC\fP \fC\fP
.PP
\fBA\fP library to create Windows, macOS, and Linux applications\&.
.PP
This library is under active development so we don't provide API or ABI compatibility at this moment\&.
.PP
.IP "\(bu" 2
\fCDocumentation\fP
.PP
.SH "Dependencies"
.PP
\fIlaf\fP can be compiled with two back-ends (\fCLAF_BACKEND\fP): \fCskia\fP or \fCnone\fP\&.
.PP
When \fCLAF_BACKEND=skia\fP, \fIlaf\fP requires a compiled version of the \fCSkia library\fP from branch \fCaseprite-m96\fP\&. You can check the aseprite/skia fork which includes a \fCrelease with pre-built versions\fP, or the check the \fCinstructions to compile skia\fP from scratch\&.
.PP
When \fCLAF_BACKEND=none\fP, the \fCPixman library\fP can be used as an alternative implementation of the \fC\fBgfx::Region\fP\fP class (generally if you're using \fClaf-os\fP you will link it with Skia, so there is no need for Pixman at all)\&.
.SH "Compile"
.PP
To compile \fIlaf\fP with Skia as backend you have to specify some variables pointing to a valid compiled version of Skia in your disk\&. In the following example \fC/skiadir\fP is the absolute path to a directory where the Skia source code + compiled version is, or just where you've uncompressed a pre-built package of Skia (note that in this case \fC/skiadir/out/Release-x64\fP should contain the Skia library files, i\&.e\&. \fCskia\&.lib\fP on Windows or \fClibskia\&.a\fP on other platforms):
.PP
.PP
.nf
git clone https://github\&.com/aseprite/laf\&.git
cd laf
mkdir build
cd build
cmake \-G Ninja \\
  \-DLAF_BACKEND=skia \\
  \-DSKIA_DIR=/skiadir \\
  \-DSKIA_LIBRARY_DIR=/skiadir/out/Release\-x64 \\
  \&.\&.
ninja
\&./examples/helloworld
.fi
.PP
.PP
To compile only the library (without examples and tests) you can disable the \fCLAF_WITH_EXAMPLES\fP/\fCLAF_WITH_TESTS\fP options:
.PP
.PP
.nf
cmake \-DLAF_WITH_EXAMPLES=OFF \-DLAF_WITH_TESTS=OFF \&.\&.\&.
.fi
.PP
.SH "Running Tests"
.PP
You can use \fCctest\fP to run all tests:
.PP
.PP
.nf
cd build
ninja
ctest
.fi
.PP
.SH "License"
.PP
\fIlaf\fP is distributed under the terms of \fCthe MIT license\fP\&.
.PP
Some functions in \fIlaf\fP depends on third party libraries (you should include these license notices when you distribute your software):
.PP
.IP "\(bu" 2
Tests use the \fCGoogle Test\fP framework by Google Inc\&. licensed under \fCa BSD-like license\fP\&.
.IP "\(bu" 2
Color spaces, \fC\fBgfx::Region\fP\fP, and the \fClaf::os\fP library use code from the \fCSkia library\fP by Google Inc\&. licensed under \fCa BSD-like license\fP and several other \fCthird-party libraries/licenses\fP\&.
.IP "\(bu" 2
\fC\fBgfx::Region\fP\fP uses the pixman library if you are not compiling with the Skia backend (e\&.g\&. a if you want to create only Command Line utilities that uses the \fC\fBgfx::Region\fP\fP class) on Linux or macOS\&. On Windows we use an alternative implementation with \fCHRGN\fP\&. Pixman is distributed under the \fCMIT License\fP\&. 
.PP

