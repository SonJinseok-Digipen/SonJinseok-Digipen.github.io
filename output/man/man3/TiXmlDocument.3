.TH "TiXmlDocument" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TiXmlDocument
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinyxml\&.h>\fP
.PP
Inherits \fBTiXmlNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTiXmlDocument\fP ()"
.br
.RI "Create an empty document, that has no name\&. "
.ti -1c
.RI "\fBTiXmlDocument\fP (const char *documentName)"
.br
.RI "Create a document with a name\&. The name of the document is also the filename of the xml\&. "
.ti -1c
.RI "\fBTiXmlDocument\fP (const \fBTiXmlDocument\fP &copy)"
.br
.ti -1c
.RI "\fBTiXmlDocument\fP & \fBoperator=\fP (const \fBTiXmlDocument\fP &copy)"
.br
.ti -1c
.RI "bool \fBLoadFile\fP (TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)"
.br
.ti -1c
.RI "bool \fBSaveFile\fP () const"
.br
.RI "Save a file using the current document value\&. Returns true if successful\&. "
.ti -1c
.RI "bool \fBLoadFile\fP (const char *filename, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)"
.br
.RI "Load a file using the given filename\&. Returns true if successful\&. "
.ti -1c
.RI "bool \fBSaveFile\fP (const char *filename) const"
.br
.RI "Save a file using the given filename\&. Returns true if successful\&. "
.ti -1c
.RI "bool \fBLoadFile\fP (FILE *, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)"
.br
.ti -1c
.RI "bool \fBSaveFile\fP (FILE *) const"
.br
.RI "Save a file using the given FILE*\&. Returns true if successful\&. "
.ti -1c
.RI "virtual const char * \fBParse\fP (const char *p, \fBTiXmlParsingData\fP *\fBdata\fP=0, TiXmlEncoding encoding=TIXML_DEFAULT_ENCODING)"
.br
.ti -1c
.RI "const \fBTiXmlElement\fP * \fBRootElement\fP () const"
.br
.ti -1c
.RI "\fBTiXmlElement\fP * \fBRootElement\fP ()"
.br
.ti -1c
.RI "bool \fBError\fP () const"
.br
.ti -1c
.RI "const char * \fBErrorDesc\fP () const"
.br
.RI "Contains a textual (english) description of the error if one occurs\&. "
.ti -1c
.RI "int \fBErrorId\fP () const"
.br
.ti -1c
.RI "int \fBErrorRow\fP () const"
.br
.ti -1c
.RI "int \fBErrorCol\fP () const"
.br
.RI "The column where the error occured\&. See \fBErrorRow()\fP "
.ti -1c
.RI "void \fBSetTabSize\fP (int _tabsize)"
.br
.ti -1c
.RI "int \fBTabSize\fP () const"
.br
.ti -1c
.RI "void \fBClearError\fP ()"
.br
.ti -1c
.RI "void \fBPrint\fP () const"
.br
.ti -1c
.RI "virtual void \fBPrint\fP (FILE *cfile, int depth=0) const"
.br
.RI "Print this Document to a FILE stream\&. "
.ti -1c
.RI "void \fBSetError\fP (int err, const char *errorLocation, \fBTiXmlParsingData\fP *prevData, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "virtual const \fBTiXmlDocument\fP * \fBToDocument\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlDocument\fP * \fBToDocument\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null not of the requested type\&. "
.ti -1c
.RI "virtual bool \fBAccept\fP (\fBTiXmlVisitor\fP *\fBcontent\fP) const"
.br
.in -1c

Public Member Functions inherited from \fBTiXmlNode\fP
.in +1c
.ti -1c
.RI "const char * \fBValue\fP () const"
.br
.ti -1c
.RI "const TIXML_STRING & \fBValueTStr\fP () const"
.br
.ti -1c
.RI "void \fBSetValue\fP (const char *_value)"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Delete all the children of this node\&. Does not affect 'this'\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBParent\fP ()"
.br
.RI "One step up the DOM\&. "
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBParent\fP () const"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBFirstChild\fP () const"
.br
.RI "The first child of this node\&. Will be null if there are no children\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBFirstChild\fP ()"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBFirstChild\fP (const char *\fBvalue\fP) const"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBFirstChild\fP (const char *_value)"
.br
.RI "The first child of this node with the matching 'value'\&. Will be null if none found\&. "
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBLastChild\fP () const"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBLastChild\fP ()"
.br
.RI "The last child of this node\&. Will be null if there are no children\&. "
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBLastChild\fP (const char *\fBvalue\fP) const"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBLastChild\fP (const char *_value)"
.br
.RI "The last child of this node matching 'value'\&. Will be null if there are no children\&. "
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBIterateChildren\fP (const \fBTiXmlNode\fP *previous) const"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBIterateChildren\fP (const \fBTiXmlNode\fP *previous)"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBIterateChildren\fP (const char *\fBvalue\fP, const \fBTiXmlNode\fP *previous) const"
.br
.RI "This flavor of IterateChildren searches for children with a particular 'value'\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBIterateChildren\fP (const char *_value, const \fBTiXmlNode\fP *previous)"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBInsertEndChild\fP (const \fBTiXmlNode\fP &addThis)"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBLinkEndChild\fP (\fBTiXmlNode\fP *addThis)"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBInsertBeforeChild\fP (\fBTiXmlNode\fP *beforeThis, const \fBTiXmlNode\fP &addThis)"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBInsertAfterChild\fP (\fBTiXmlNode\fP *afterThis, const \fBTiXmlNode\fP &addThis)"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBReplaceChild\fP (\fBTiXmlNode\fP *replaceThis, const \fBTiXmlNode\fP &withThis)"
.br
.ti -1c
.RI "bool \fBRemoveChild\fP (\fBTiXmlNode\fP *removeThis)"
.br
.RI "Delete a child of this node\&. "
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBPreviousSibling\fP () const"
.br
.RI "Navigate to a sibling node\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBPreviousSibling\fP ()"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBPreviousSibling\fP (const char *) const"
.br
.RI "Navigate to a sibling node\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBPreviousSibling\fP (const char *_prev)"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBNextSibling\fP () const"
.br
.RI "Navigate to a sibling node\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBNextSibling\fP ()"
.br
.ti -1c
.RI "const \fBTiXmlNode\fP * \fBNextSibling\fP (const char *) const"
.br
.RI "Navigate to a sibling node with the given 'value'\&. "
.ti -1c
.RI "\fBTiXmlNode\fP * \fBNextSibling\fP (const char *_next)"
.br
.ti -1c
.RI "const \fBTiXmlElement\fP * \fBNextSiblingElement\fP () const"
.br
.ti -1c
.RI "\fBTiXmlElement\fP * \fBNextSiblingElement\fP ()"
.br
.ti -1c
.RI "const \fBTiXmlElement\fP * \fBNextSiblingElement\fP (const char *) const"
.br
.ti -1c
.RI "\fBTiXmlElement\fP * \fBNextSiblingElement\fP (const char *_next)"
.br
.ti -1c
.RI "const \fBTiXmlElement\fP * \fBFirstChildElement\fP () const"
.br
.RI "Convenience function to get through elements\&. "
.ti -1c
.RI "\fBTiXmlElement\fP * \fBFirstChildElement\fP ()"
.br
.ti -1c
.RI "const \fBTiXmlElement\fP * \fBFirstChildElement\fP (const char *_value) const"
.br
.RI "Convenience function to get through elements\&. "
.ti -1c
.RI "\fBTiXmlElement\fP * \fBFirstChildElement\fP (const char *_value)"
.br
.ti -1c
.RI "int \fBType\fP () const"
.br
.ti -1c
.RI "const \fBTiXmlDocument\fP * \fBGetDocument\fP () const"
.br
.ti -1c
.RI "\fBTiXmlDocument\fP * \fBGetDocument\fP ()"
.br
.ti -1c
.RI "bool \fBNoChildren\fP () const"
.br
.RI "Returns true if this node has no children\&. "
.ti -1c
.RI "virtual const \fBTiXmlDocument\fP * \fBToDocument\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual const \fBTiXmlElement\fP * \fBToElement\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual const \fBTiXmlComment\fP * \fBToComment\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual const \fBTiXmlUnknown\fP * \fBToUnknown\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual const \fBTiXmlText\fP * \fBToText\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual const \fBTiXmlDeclaration\fP * \fBToDeclaration\fP () const"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlDocument\fP * \fBToDocument\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlElement\fP * \fBToElement\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlComment\fP * \fBToComment\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlUnknown\fP * \fBToUnknown\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlText\fP * \fBToText\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlDeclaration\fP * \fBToDeclaration\fP ()"
.br
.RI "Cast to a more defined type\&. Will return null if not of the requested type\&. "
.ti -1c
.RI "virtual \fBTiXmlNode\fP * \fBClone\fP () const =0"
.br
.ti -1c
.RI "virtual bool \fBAccept\fP (\fBTiXmlVisitor\fP *visitor) const =0"
.br
.in -1c

Public Member Functions inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "virtual void \fBPrint\fP (FILE *cfile, int depth) const =0"
.br
.ti -1c
.RI "int \fBRow\fP () const"
.br
.ti -1c
.RI "int \fBColumn\fP () const"
.br
.RI "See \fBRow()\fP "
.ti -1c
.RI "void \fBSetUserData\fP (void *user)"
.br
.RI "Set a pointer to arbitrary user data\&. "
.ti -1c
.RI "void * \fBGetUserData\fP ()"
.br
.RI "Get a pointer to arbitrary user data\&. "
.ti -1c
.RI "const void * \fBGetUserData\fP () const"
.br
.RI "Get a pointer to arbitrary user data\&. "
.ti -1c
.RI "virtual const char * \fBParse\fP (const char *p, \fBTiXmlParsingData\fP *\fBdata\fP, TiXmlEncoding encoding)=0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBTiXmlNode\fP * \fBClone\fP () const"
.br
.in -1c

Protected Member Functions inherited from \fBTiXmlNode\fP
.in +1c
.ti -1c
.RI "\fBTiXmlNode\fP (\fBNodeType\fP _type)"
.br
.ti -1c
.RI "void \fBCopyTo\fP (\fBTiXmlNode\fP *target) const"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBIdentify\fP (const char *start, TiXmlEncoding encoding)"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBTiXmlNode\fP
.in +1c
.ti -1c
.RI "enum \fBNodeType\fP { \fBTINYXML_DOCUMENT\fP, \fBTINYXML_ELEMENT\fP, \fBTINYXML_COMMENT\fP, \fBTINYXML_UNKNOWN\fP, \fBTINYXML_TEXT\fP, \fBTINYXML_DECLARATION\fP, \fBTINYXML_TYPECOUNT\fP }"
.br
.in -1c

Public Types inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "enum { \fBTIXML_NO_ERROR\fP = 0, \fBTIXML_ERROR\fP, \fBTIXML_ERROR_OPENING_FILE\fP, \fBTIXML_ERROR_PARSING_ELEMENT\fP, \fBTIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME\fP, \fBTIXML_ERROR_READING_ELEMENT_VALUE\fP, \fBTIXML_ERROR_READING_ATTRIBUTES\fP, \fBTIXML_ERROR_PARSING_EMPTY\fP, \fBTIXML_ERROR_READING_END_TAG\fP, \fBTIXML_ERROR_PARSING_UNKNOWN\fP, \fBTIXML_ERROR_PARSING_COMMENT\fP, \fBTIXML_ERROR_PARSING_DECLARATION\fP, \fBTIXML_ERROR_DOCUMENT_EMPTY\fP, \fBTIXML_ERROR_EMBEDDED_NULL\fP, \fBTIXML_ERROR_PARSING_CDATA\fP, \fBTIXML_ERROR_DOCUMENT_TOP_ONLY\fP, \fBTIXML_ERROR_STRING_COUNT\fP }"
.br
.in -1c

Static Public Member Functions inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "static void \fBSetCondenseWhiteSpace\fP (bool condense)"
.br
.ti -1c
.RI "static bool \fBIsWhiteSpaceCondensed\fP ()"
.br
.RI "Return the current white space setting\&. "
.ti -1c
.RI "static void \fBEncodeString\fP (const TIXML_STRING &str, TIXML_STRING *out)"
.br
.in -1c

Static Public Attributes inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "static const int \fButf8ByteTable\fP [256]"
.br
.in -1c

Static Protected Member Functions inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "static const char * \fBSkipWhiteSpace\fP (const char *, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static bool \fBIsWhiteSpace\fP (char c)"
.br
.ti -1c
.RI "static bool \fBIsWhiteSpace\fP (int c)"
.br
.ti -1c
.RI "static const char * \fBReadName\fP (const char *p, TIXML_STRING *name, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static const char * \fBReadText\fP (const char *in, TIXML_STRING *text, bool ignoreWhiteSpace, const char *endTag, bool ignoreCase, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static const char * \fBGetEntity\fP (const char *in, char *\fBvalue\fP, int *length, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static const char * \fBGetChar\fP (const char *p, char *_value, int *length, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static bool \fBStringEqual\fP (const char *p, const char *endTag, bool ignoreCase, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static int \fBIsAlpha\fP (unsigned char anyByte, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static int \fBIsAlphaNum\fP (unsigned char anyByte, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static int \fBToLower\fP (int v, TiXmlEncoding encoding)"
.br
.ti -1c
.RI "static void \fBConvertUTF32ToUTF8\fP (unsigned long \fBinput\fP, char *output, int *length)"
.br
.in -1c

Protected Attributes inherited from \fBTiXmlNode\fP
.in +1c
.ti -1c
.RI "\fBTiXmlNode\fP * \fBparent\fP"
.br
.ti -1c
.RI "\fBNodeType\fP \fBtype\fP"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBfirstChild\fP"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBlastChild\fP"
.br
.ti -1c
.RI "TIXML_STRING \fBvalue\fP"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBprev\fP"
.br
.ti -1c
.RI "\fBTiXmlNode\fP * \fBnext\fP"
.br
.in -1c

Protected Attributes inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "\fBTiXmlCursor\fP \fBlocation\fP"
.br
.ti -1c
.RI "void * \fBuserData\fP"
.br
.RI "Field containing a generic user pointer\&. "
.in -1c

Static Protected Attributes inherited from \fBTiXmlBase\fP
.in +1c
.ti -1c
.RI "static const char * \fBerrorString\fP [TIXML_ERROR_STRING_COUNT]"
.br
.in -1c
.SH "Detailed Description"
.PP 
Always the top level node\&. \fBA\fP document binds together all the XML pieces\&. It can be saved, loaded, and printed to the screen\&. The 'value' of a document node is the xml file name\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool TiXmlDocument::Accept (\fBTiXmlVisitor\fP * content) const\fC [virtual]\fP"
Walk the XML tree visiting this node and all of its children\&. 
.PP
Implements \fBTiXmlNode\fP\&.
.SS "void TiXmlDocument::ClearError ()\fC [inline]\fP"
If you have handled the error, it can be reset with this call\&. The error state is automatically cleared if you Parse a new XML block\&. 
.SS "\fBTiXmlNode\fP * TiXmlDocument::Clone () const\fC [protected]\fP, \fC [virtual]\fP"
Create an exact duplicate of this node and return it\&. The memory must be deleted by the caller\&. 
.PP
Implements \fBTiXmlNode\fP\&.
.SS "bool TiXmlDocument::Error () const\fC [inline]\fP"
If an error occurs, Error will be set to true\&. Also,
.IP "\(bu" 2
The \fBErrorId()\fP will contain the integer identifier of the error (not generally useful)
.IP "\(bu" 2
The \fBErrorDesc()\fP method will return the name of the error\&. (very useful)
.IP "\(bu" 2
The \fBErrorRow()\fP and \fBErrorCol()\fP will return the location of the error (if known) 
.PP

.SS "int TiXmlDocument::ErrorId () const\fC [inline]\fP"
Generally, you probably want the error string ( \fBErrorDesc()\fP )\&. But if you prefer the ErrorId, this function will fetch it\&. 
.SS "int TiXmlDocument::ErrorRow () const\fC [inline]\fP"
Returns the location (if known) of the error\&. The first column is column 1, and the first row is row 1\&. \fBA\fP value of 0 means the row and column wasn't applicable (memory errors, for example, have no row/column) or the parser lost the error\&. (An error in the error reporting, in that case\&.)
.PP
\fBSee also\fP
.RS 4
\fBSetTabSize\fP, \fBRow\fP, \fBColumn\fP 
.RE
.PP

.SS "bool TiXmlDocument::LoadFile (FILE * file, TiXmlEncoding encoding = \fCTIXML_DEFAULT_ENCODING\fP)"
Load a file using the given FILE*\&. Returns true if successful\&. Note that this method doesn't stream - the entire object pointed at by the FILE* will be interpreted as an XML file\&. TinyXML doesn't stream in XML from the current file location\&. Streaming may be added in the future\&. 
.SS "bool TiXmlDocument::LoadFile (TiXmlEncoding encoding = \fCTIXML_DEFAULT_ENCODING\fP)"
Load a file using the current document value\&. Returns true if successful\&. Will delete any existing document data before loading\&. 
.SS "const char * TiXmlDocument::Parse (const char * p, \fBTiXmlParsingData\fP * data = \fC0\fP, TiXmlEncoding encoding = \fCTIXML_DEFAULT_ENCODING\fP)\fC [virtual]\fP"
Parse the given null terminated block of xml data\&. Passing in an encoding to this method (either TIXML_ENCODING_LEGACY or TIXML_ENCODING_UTF8 will force TinyXml to use that encoding, regardless of what TinyXml might otherwise try to detect\&. 
.PP
Implements \fBTiXmlBase\fP\&.
.SS "void TiXmlDocument::Print () const\fC [inline]\fP"
Write the document to standard out using formatted printing ('pretty print')\&. 
.SS "void TiXmlDocument::Print (FILE * cfile, int depth = \fC0\fP) const\fC [virtual]\fP"

.PP
Print this Document to a FILE stream\&. 
.PP
Implements \fBTiXmlBase\fP\&.
.SS "const \fBTiXmlElement\fP * TiXmlDocument::RootElement () const\fC [inline]\fP"
Get the root element -- the only top level element -- of the document\&. In well formed XML, there should only be one\&. TinyXml is tolerant of multiple elements at the document level\&. 
.SS "void TiXmlDocument::SetTabSize (int _tabsize)\fC [inline]\fP"
\fBSetTabSize()\fP allows the error reporting functions (\fBErrorRow()\fP and \fBErrorCol()\fP) to report the correct values for row and column\&. It does not change the output or input in any way\&.
.PP
By calling this method, with a tab size greater than 0, the row and column of each node and attribute is stored when the file is loaded\&. Very useful for tracking the DOM back in to the source file\&.
.PP
The tab size is required for calculating the location of nodes\&. If not set, the default of 4 is used\&. The tabsize is set per document\&. Setting the tabsize to 0 disables row/column tracking\&.
.PP
Note that row and column tracking is not supported when using operator>>\&.
.PP
The tab size needs to be enabled before the parse or load\&. Correct usage: 
.PP
.nf
    TiXmlDocument doc;
    doc\&.SetTabSize( 8 );
    doc\&.Load( 'myfile\&.xml' );
.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBRow\fP, \fBColumn\fP 
.RE
.PP

.SS "virtual \fBTiXmlDocument\fP * TiXmlDocument::ToDocument ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Cast to a more defined type\&. Will return null not of the requested type\&. 
.PP
Reimplemented from \fBTiXmlNode\fP\&.
.SS "virtual const \fBTiXmlDocument\fP * TiXmlDocument::ToDocument () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Cast to a more defined type\&. Will return null not of the requested type\&. 
.PP
Reimplemented from \fBTiXmlNode\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
