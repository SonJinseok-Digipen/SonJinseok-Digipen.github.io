.TH "md__ase_sprite_aseprite_src__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_src__r_e_a_d_m_e \- Aseprite Source Code 
.PP
If you are here is because you want to learn about Aseprite source code\&. We'll try to write in these \fCREADME\&.md\fP files a summary of each module/library\&.
.SH "Modules & Libraries"
.PP
Aseprite is separated in the following layers/modules:
.SS "Level 0: Completely independent modules"
These libraries are easy to be used and embedded in other software because they don't depend on any other component\&.
.PP
.IP "\(bu" 2
\fCclip\fP: Clipboard library\&.
.IP "\(bu" 2
\fCfixmath\fP: Fixed point operations (original code from Allegro code by Shawn Hargreaves)\&.
.IP "\(bu" 2
\fCflic\fP: Library to load/save FLI/FLC files\&.
.IP "\(bu" 2
laf/\fCbase\fP: Core/basic stuff, multithreading, utf8, sha1, file system, memory, etc\&.
.IP "\(bu" 2
laf/\fCgfx\fP: Abstract graphics structures like point, size, rectangle, region, color, etc\&.
.IP "\(bu" 2
\fCobservable\fP: Signal/slot functions\&.
.IP "\(bu" 2
\fCscripting\fP: JavaScript engine\&.
.IP "\(bu" 2
\fCsteam\fP: Steam API wrapper to avoid static linking to the \&.lib file\&.
.IP "\(bu" 2
\fCundo\fP: Generic library to manage a history of undoable commands\&.
.PP
.SS "Level 1"
.IP "\(bu" 2
\fCcfg\fP (base): Library to load/save \&.ini files\&.
.IP "\(bu" 2
\fCgen\fP (base): Helper utility to generate C++ files from different XMLs\&.
.IP "\(bu" 2
\fCnet\fP (base): Networking library to send \fBHTTP\fP requests\&.
.IP "\(bu" 2
laf/\fCos\fP (base, gfx, wacom): OS input/output\&.
.PP
.SS "Level 2"
.IP "\(bu" 2
\fCdoc\fP (base, fixmath, gfx): Document model library\&.
.IP "\(bu" 2
\fCui\fP (base, gfx, os): Portable UI library (buttons, windows, text fields, etc\&.)
.IP "\(bu" 2
\fCupdater\fP (base, cfg, net): Component to check for updates\&.
.PP
.SS "Level 3"
.IP "\(bu" 2
\fCdio\fP (base, doc, fixmath, flic): Load/save sprites/documents\&.
.IP "\(bu" 2
\fCfilters\fP (base, doc, gfx): Effects for images\&.
.IP "\(bu" 2
\fCrender\fP (base, doc, gfx): Library to render documents\&.
.PP
.SS "Level 4"
.IP "\(bu" 2
\fCapp\fP (base, doc, dio, filters, fixmath, flic, gfx, pen, render, scripting, os, ui, undo, updater)
.IP "\(bu" 2
\fCdesktop\fP (base, doc, dio, render): Integration with the desktop (Windows Explorer, Finder, GNOME, KDE, etc\&.)
.PP
.SS "Level 5"
.IP "\(bu" 2
\fCmain\fP (app, base, os, ui)
.PP
.SH "Debugging Tricks"
.PP
When Aseprite is compiled with \fCENABLE_DEVMODE\fP, you have the following extra commands/features available:
.PP
.IP "\(bu" 2
\fCF5\fP: On Windows shows the amount of used memory\&.
.IP "\(bu" 2
\fCF1\fP: Switch new/old render engine\&.
.IP "\(bu" 2
\fCCtrl+F1\fP: Switch/test Screen/UI Scaling values\&.
.IP "\(bu" 2
\fCCtrl+Alt+Shift+Q\fP: crashes the application in case that you want to test the anticrash feature or your need a memory dump file\&.
.IP "\(bu" 2
\fCCtrl+Alt+Shift+R\fP: recover the active document from the data recovery store\&.
.IP "\(bu" 2
\fCaseprite\&.ini\fP: \fC[perf] show_render_time=true\fP shows a performance clock in the Editor\&.
.PP
.PP
In Debug mode (\fC_DEBUG\fP):
.PP
.IP "\(bu" 2
\fC\fCTRACEARGS\fP\fP: in debug mode, it prints in the terminal/console each given argument
.PP
.SH "Detect Platform"
.PP
You can check the platform using some \fClaf\fP macros: 
.PP
.nf
#if LAF_WINDOWS
  // \&.\&.\&.
#elif LAF_MACOS
  // \&.\&.\&.
#elif LAF_LINUX
  // \&.\&.\&.
#endif

.fi
.PP
 Or using platform-specific macros: 
.PP
.nf
#ifdef _WIN32
  #ifdef _WIN64
    // Windows x64
  #else
    // Windows x86
  #endif
#elif defined(__APPLE__)
    // macOS
#else
    // Linux
#endif

.fi
.PP
 
