.TH "hb_bit_set_invertible_t" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hb_bit_set_invertible_t
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBiter_t\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef bool \fBvalue_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP (\fBhb_bit_set_invertible_t\fP &o)=default"
.br
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP (\fBhb_bit_set_invertible_t\fP &&o)=default"
.br
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP & \fBoperator=\fP (const \fBhb_bit_set_invertible_t\fP &o)=default"
.br
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP & \fBoperator=\fP (\fBhb_bit_set_invertible_t\fP &&o)=default"
.br
.ti -1c
.RI "void \fBinit\fP ()"
.br
.ti -1c
.RI "void \fBfini\fP ()"
.br
.ti -1c
.RI "void \fBerr\fP ()"
.br
.ti -1c
.RI "bool \fBin_error\fP () const"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBinvert\fP ()"
.br
.ti -1c
.RI "bool \fBis_empty\fP () const"
.br
.ti -1c
.RI "hb_codepoint_t \fBget_min\fP () const"
.br
.ti -1c
.RI "hb_codepoint_t \fBget_max\fP () const"
.br
.ti -1c
.RI "unsigned int \fBget_population\fP () const"
.br
.ti -1c
.RI "void \fBadd\fP (hb_codepoint_t g)"
.br
.ti -1c
.RI "bool \fBadd_range\fP (hb_codepoint_t \fBa\fP, hb_codepoint_t b)"
.br
.ti -1c
.RI "template<typename T > void \fBadd_array\fP (const T *array, unsigned int count, unsigned int stride=sizeof(T))"
.br
.ti -1c
.RI "template<typename T > void \fBadd_array\fP (const \fBhb_array_t\fP< const T > &arr)"
.br
.ti -1c
.RI "template<typename T > bool \fBadd_sorted_array\fP (const T *array, unsigned int count, unsigned int stride=sizeof(T))"
.br
.ti -1c
.RI "template<typename T > bool \fBadd_sorted_array\fP (const \fBhb_sorted_array_t\fP< const T > &arr)"
.br
.ti -1c
.RI "void \fBdel\fP (hb_codepoint_t g)"
.br
.ti -1c
.RI "void \fBdel_range\fP (hb_codepoint_t \fBa\fP, hb_codepoint_t b)"
.br
.ti -1c
.RI "bool \fBget\fP (hb_codepoint_t g) const"
.br
.ti -1c
.RI "value_t \fBoperator[]\fP (hb_codepoint_t k) const"
.br
.ti -1c
.RI "bool \fBhas\fP (hb_codepoint_t k) const"
.br
.ti -1c
.RI "bool \fBoperator()\fP (hb_codepoint_t k) const"
.br
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP & \fBoperator<<\fP (hb_codepoint_t v)"
.br
.ti -1c
.RI "\fBhb_bit_set_invertible_t\fP & \fBoperator<<\fP (const \fBhb_pair_t\fP< hb_codepoint_t, hb_codepoint_t > &range)"
.br
.ti -1c
.RI "bool \fBintersects\fP (hb_codepoint_t first, hb_codepoint_t last) const"
.br
.ti -1c
.RI "void \fBset\fP (const \fBhb_bit_set_invertible_t\fP &other)"
.br
.ti -1c
.RI "bool \fBis_equal\fP (const \fBhb_bit_set_invertible_t\fP &other) const"
.br
.ti -1c
.RI "bool \fBis_subset\fP (const \fBhb_bit_set_invertible_t\fP &larger_set) const"
.br
.ti -1c
.RI "void \fBunion_\fP (const \fBhb_bit_set_invertible_t\fP &other)"
.br
.ti -1c
.RI "void \fBintersect\fP (const \fBhb_bit_set_invertible_t\fP &other)"
.br
.ti -1c
.RI "void \fBsubtract\fP (const \fBhb_bit_set_invertible_t\fP &other)"
.br
.ti -1c
.RI "void \fBsymmetric_difference\fP (const \fBhb_bit_set_invertible_t\fP &other)"
.br
.ti -1c
.RI "bool \fBnext\fP (hb_codepoint_t *codepoint) const"
.br
.ti -1c
.RI "bool \fBprevious\fP (hb_codepoint_t *codepoint) const"
.br
.ti -1c
.RI "bool \fBnext_range\fP (hb_codepoint_t *first, hb_codepoint_t *last) const"
.br
.ti -1c
.RI "bool \fBprevious_range\fP (hb_codepoint_t *first, hb_codepoint_t *last) const"
.br
.ti -1c
.RI "\fBiter_t\fP \fBiter\fP () const"
.br
.ti -1c
.RI "\fBoperator iter_t\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBhb_bit_set_t\fP \fBs\fP"
.br
.ti -1c
.RI "bool \fBinverted\fP = false"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr bool \fBSENTINEL\fP = false"
.br
.ti -1c
.RI "static constexpr hb_codepoint_t \fBINVALID\fP = hb_bit_set_t::INVALID"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "template<typename Op > void \fBprocess\fP (const Op &op, const \fBhb_bit_set_invertible_t\fP &other)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "void \fBswap\fP (\fBhb_bit_set_invertible_t\fP &\fBa\fP, \fBhb_bit_set_invertible_t\fP &b)"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
