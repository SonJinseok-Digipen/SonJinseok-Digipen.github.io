.TH "basic_printf_context< OutputIt, Char >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_printf_context< OutputIt, Char >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_printf_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_printf_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBprintf_formatter\fP< T >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_printf_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_printf_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBprintf_formatter\fP< T >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_printf_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_printf_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBprintf_formatter\fP< T >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_printf_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_printf_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBprintf_formatter\fP< T >"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP > args)"
.br
.ti -1c
.RI "OutputIt \fBout\fP ()"
.br
.ti -1c
.RI "void \fBadvance_to\fP (OutputIt it)"
.br
.ti -1c
.RI "detail::locale_ref \fBlocale\fP ()"
.br
.ti -1c
.RI "\fBformat_arg\fP \fBarg\fP (int id) const"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "\fBbasic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP > args)"
.br
.ti -1c
.RI "OutputIt \fBout\fP ()"
.br
.ti -1c
.RI "void \fBadvance_to\fP (OutputIt it)"
.br
.ti -1c
.RI "detail::locale_ref \fBlocale\fP ()"
.br
.ti -1c
.RI "\fBformat_arg\fP \fBarg\fP (int id) const"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "\fBbasic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP > args)"
.br
.ti -1c
.RI "OutputIt \fBout\fP ()"
.br
.ti -1c
.RI "void \fBadvance_to\fP (OutputIt it)"
.br
.ti -1c
.RI "detail::locale_ref \fBlocale\fP ()"
.br
.ti -1c
.RI "\fBformat_arg\fP \fBarg\fP (int id) const"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "\fBbasic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP > args)"
.br
.ti -1c
.RI "OutputIt \fBout\fP ()"
.br
.ti -1c
.RI "void \fBadvance_to\fP (OutputIt it)"
.br
.ti -1c
.RI "detail::locale_ref \fBlocale\fP ()"
.br
.ti -1c
.RI "\fBformat_arg\fP \fBarg\fP (int id) const"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename OutputIt , typename Char > \fBbasic_printf_context\fP< OutputIt, Char >\fB::basic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP< OutputIt, Char > > args)\fC [inline]\fP"
\\rst Constructs a \fCprintf_context\fP object\&. References to the arguments are stored in the context object so make sure they have appropriate lifetimes\&. \\endrst 
.SS "template<typename OutputIt , typename Char > \fBbasic_printf_context\fP< OutputIt, Char >\fB::basic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP< OutputIt, Char > > args)\fC [inline]\fP"
\\rst Constructs a \fCprintf_context\fP object\&. References to the arguments are stored in the context object so make sure they have appropriate lifetimes\&. \\endrst 
.SS "template<typename OutputIt , typename Char > \fBbasic_printf_context\fP< OutputIt, Char >\fB::basic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP< OutputIt, Char > > args)\fC [inline]\fP"
\\rst Constructs a \fCprintf_context\fP object\&. References to the arguments are stored in the context object so make sure they have appropriate lifetimes\&. \\endrst 
.SS "template<typename OutputIt , typename Char > \fBbasic_printf_context\fP< OutputIt, Char >\fB::basic_printf_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_printf_context\fP< OutputIt, Char > > args)\fC [inline]\fP"
\\rst Constructs a \fCprintf_context\fP object\&. References to the arguments are stored in the context object so make sure they have appropriate lifetimes\&. \\endrst 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
