.TH "arg_mapper< Context >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
arg_mapper< Context >
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBformattable\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBchar_type\fP = typename Context::char_type"
.br
.ti -1c
.RI "using \fBchar_type\fP = typename Context::char_type"
.br
.ti -1c
.RI "using \fBchar_type\fP = typename Context::char_type"
.br
.ti -1c
.RI "using \fBchar_type\fP = typename Context::char_type"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (signed char val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned char val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (short val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned short val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long val) \-> long_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long val) \-> ulong_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long long val) \-> long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long long val) \-> unsigned long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int128_opt val) \-> int128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (uint128_opt val) \-> uint128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (bool val) \-> bool"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_same< T, char >\fB::value\fP|| std::is_same< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T val) \-> char_type"
.br
.ti -1c
.RI "template<typename T , enable_if_t<(std::is_same< T, wchar_t >\fB::value\fP||std::is_same< T, char16_t >\fB::value\fP||std::is_same< T, char32_t >\fB::value\fP) &&!std::is_same< T, char_type >\fB::value\fP, int >  = 0> FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (float val) \-> float"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (double val) \-> double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long double val) \-> long double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && !std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBstd_string_view\fP< char_type > >\fB::value\fP && !std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (std::nullptr_t val) \-> const void *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_pointer< T >\fB::value\fP||std::is_member_pointer< T >\fB::value\fP|| std::is_function< typename std::remove_pointer< T >::type >\fB::value\fP||(std::is_convertible< const T &, const void * >\fB::value\fP && !std::is_convertible< const T &, const char_type * >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP)) > FMT_CONSTEXPR auto \fBmap\fP (const T &) \-> \fBunformattable_pointer\fP"
.br
.ti -1c
.RI "template<typename T , std::size_t N, FMT_ENABLE_IF(!std::is_same< T, wchar_t >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T(&values)[N]) \-> const T(&)[N]"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_enum< T >\fB::value\fP &&std::is_convertible< T, int >\fB::value\fP && !\fBhas_format_as\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_DEPRECATED FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(static_cast< underlying_t< T > >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBhas_format_as\fP< T >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(format_as(T())))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&val) \-> T &"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(!\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&) \-> \fBunformattable_const\fP"
.br
.ti -1c
.RI "template<typename T , typename U  = remove_cvref_t<T>, FMT_ENABLE_IF(!\fBis_string\fP< U >\fB::value\fP &&!\fBis_char\fP< U >\fB::value\fP && !std::is_array< U >\fB::value\fP && !std::is_pointer< U >\fB::value\fP && !\fBhas_format_as\fP< U >\fB::value\fP &&(has_formatter< U, \fBContext\fP >\fB::value\fP|| has_fallback_formatter< U, char_type >\fB::value\fP)) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T &&val) \-> decltype(this\->do_map(std::forward< T >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_named_arg\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &\fBnamed_arg\fP) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(named_arg\&.value))"
.br
.ti -1c
.RI "auto \fBmap\fP (\&.\&.\&.) \-> \fBunformattable\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (signed char val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned char val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (short val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned short val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long val) \-> long_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long val) \-> ulong_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long long val) \-> long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long long val) \-> unsigned long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int128_opt val) \-> int128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (uint128_opt val) \-> uint128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (bool val) \-> bool"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_same< T, char >\fB::value\fP|| std::is_same< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T val) \-> char_type"
.br
.ti -1c
.RI "template<typename T , enable_if_t<(std::is_same< T, wchar_t >\fB::value\fP||std::is_same< T, char16_t >\fB::value\fP||std::is_same< T, char32_t >\fB::value\fP) &&!std::is_same< T, char_type >\fB::value\fP, int >  = 0> FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (float val) \-> float"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (double val) \-> double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long double val) \-> long double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && !std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBstd_string_view\fP< char_type > >\fB::value\fP && !std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (std::nullptr_t val) \-> const void *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_pointer< T >\fB::value\fP||std::is_member_pointer< T >\fB::value\fP|| std::is_function< typename std::remove_pointer< T >::type >\fB::value\fP||(std::is_convertible< const T &, const void * >\fB::value\fP && !std::is_convertible< const T &, const char_type * >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP)) > FMT_CONSTEXPR auto \fBmap\fP (const T &) \-> \fBunformattable_pointer\fP"
.br
.ti -1c
.RI "template<typename T , std::size_t N, FMT_ENABLE_IF(!std::is_same< T, wchar_t >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T(&values)[N]) \-> const T(&)[N]"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_enum< T >\fB::value\fP &&std::is_convertible< T, int >\fB::value\fP && !\fBhas_format_as\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_DEPRECATED FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(static_cast< underlying_t< T > >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBhas_format_as\fP< T >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(format_as(T())))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&val) \-> T &"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(!\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&) \-> \fBunformattable_const\fP"
.br
.ti -1c
.RI "template<typename T , typename U  = remove_cvref_t<T>, FMT_ENABLE_IF(!\fBis_string\fP< U >\fB::value\fP &&!\fBis_char\fP< U >\fB::value\fP && !std::is_array< U >\fB::value\fP && !std::is_pointer< U >\fB::value\fP && !\fBhas_format_as\fP< U >\fB::value\fP &&(has_formatter< U, \fBContext\fP >\fB::value\fP|| has_fallback_formatter< U, char_type >\fB::value\fP)) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T &&val) \-> decltype(this\->do_map(std::forward< T >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_named_arg\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &\fBnamed_arg\fP) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(named_arg\&.value))"
.br
.ti -1c
.RI "auto \fBmap\fP (\&.\&.\&.) \-> \fBunformattable\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (signed char val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned char val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (short val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned short val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long val) \-> long_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long val) \-> ulong_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long long val) \-> long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long long val) \-> unsigned long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int128_opt val) \-> int128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (uint128_opt val) \-> uint128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (bool val) \-> bool"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_same< T, char >\fB::value\fP|| std::is_same< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T val) \-> char_type"
.br
.ti -1c
.RI "template<typename T , enable_if_t<(std::is_same< T, wchar_t >\fB::value\fP||std::is_same< T, char16_t >\fB::value\fP||std::is_same< T, char32_t >\fB::value\fP) &&!std::is_same< T, char_type >\fB::value\fP, int >  = 0> FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (float val) \-> float"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (double val) \-> double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long double val) \-> long double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && !std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBstd_string_view\fP< char_type > >\fB::value\fP && !std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (std::nullptr_t val) \-> const void *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_pointer< T >\fB::value\fP||std::is_member_pointer< T >\fB::value\fP|| std::is_function< typename std::remove_pointer< T >::type >\fB::value\fP||(std::is_convertible< const T &, const void * >\fB::value\fP && !std::is_convertible< const T &, const char_type * >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP)) > FMT_CONSTEXPR auto \fBmap\fP (const T &) \-> \fBunformattable_pointer\fP"
.br
.ti -1c
.RI "template<typename T , std::size_t N, FMT_ENABLE_IF(!std::is_same< T, wchar_t >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T(&values)[N]) \-> const T(&)[N]"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_enum< T >\fB::value\fP &&std::is_convertible< T, int >\fB::value\fP && !\fBhas_format_as\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_DEPRECATED FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(static_cast< underlying_t< T > >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBhas_format_as\fP< T >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(format_as(T())))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&val) \-> T &"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(!\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&) \-> \fBunformattable_const\fP"
.br
.ti -1c
.RI "template<typename T , typename U  = remove_cvref_t<T>, FMT_ENABLE_IF(!\fBis_string\fP< U >\fB::value\fP &&!\fBis_char\fP< U >\fB::value\fP && !std::is_array< U >\fB::value\fP && !std::is_pointer< U >\fB::value\fP && !\fBhas_format_as\fP< U >\fB::value\fP &&(has_formatter< U, \fBContext\fP >\fB::value\fP|| has_fallback_formatter< U, char_type >\fB::value\fP)) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T &&val) \-> decltype(this\->do_map(std::forward< T >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_named_arg\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &\fBnamed_arg\fP) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(named_arg\&.value))"
.br
.ti -1c
.RI "auto \fBmap\fP (\&.\&.\&.) \-> \fBunformattable\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (signed char val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned char val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (short val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned short val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int val) \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned val) \-> unsigned"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long val) \-> long_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long val) \-> ulong_type"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long long val) \-> long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (unsigned long long val) \-> unsigned long long"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (int128_opt val) \-> int128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (uint128_opt val) \-> uint128_opt"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (bool val) \-> bool"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_same< T, char >\fB::value\fP|| std::is_same< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T val) \-> char_type"
.br
.ti -1c
.RI "template<typename T , enable_if_t<(std::is_same< T, wchar_t >\fB::value\fP||std::is_same< T, char16_t >\fB::value\fP||std::is_same< T, char32_t >\fB::value\fP) &&!std::is_same< T, char_type >\fB::value\fP, int >  = 0> FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (float val) \-> float"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (double val) \-> double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (long double val) \-> long double"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const char_type *val) \-> const char_type *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_string\fP< T >\fB::value\fP &&!std::is_pointer< T >\fB::value\fP && !std::is_same< char_type, char_t< T > >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &) \-> \fBunformattable_char\fP"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_convertible< T, \fBstd_string_view\fP< char_type > >\fB::value\fP && !std::is_convertible< T, \fBbasic_string_view\fP< char_type > >\fB::value\fP && !\fBis_string\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> \fBbasic_string_view\fP< char_type >"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const void *val) \-> const void *"
.br
.ti -1c
.RI "FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (std::nullptr_t val) \-> const void *"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_pointer< T >\fB::value\fP||std::is_member_pointer< T >\fB::value\fP|| std::is_function< typename std::remove_pointer< T >::type >\fB::value\fP||(std::is_convertible< const T &, const void * >\fB::value\fP && !std::is_convertible< const T &, const char_type * >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP)) > FMT_CONSTEXPR auto \fBmap\fP (const T &) \-> \fBunformattable_pointer\fP"
.br
.ti -1c
.RI "template<typename T , std::size_t N, FMT_ENABLE_IF(!std::is_same< T, wchar_t >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T(&values)[N]) \-> const T(&)[N]"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF( std::is_enum< T >\fB::value\fP &&std::is_convertible< T, int >\fB::value\fP && !\fBhas_format_as\fP< T >\fB::value\fP &&!has_formatter< T, \fBContext\fP >\fB::value\fP && !has_fallback_formatter< T, char_type >\fB::value\fP) > FMT_DEPRECATED FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(static_cast< underlying_t< T > >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBhas_format_as\fP< T >\fB::value\fP && !has_formatter< T, \fBContext\fP >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &val) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(format_as(T())))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&val) \-> T &"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(!\fBformattable\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBdo_map\fP (T &&) \-> \fBunformattable_const\fP"
.br
.ti -1c
.RI "template<typename T , typename U  = remove_cvref_t<T>, FMT_ENABLE_IF(!\fBis_string\fP< U >\fB::value\fP &&!\fBis_char\fP< U >\fB::value\fP && !std::is_array< U >\fB::value\fP && !std::is_pointer< U >\fB::value\fP && !\fBhas_format_as\fP< U >\fB::value\fP &&(has_formatter< U, \fBContext\fP >\fB::value\fP|| has_fallback_formatter< U, char_type >\fB::value\fP)) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (T &&val) \-> decltype(this\->do_map(std::forward< T >(val)))"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBis_named_arg\fP< T >\fB::value\fP) > FMT_CONSTEXPR FMT_INLINE auto \fBmap\fP (const T &\fBnamed_arg\fP) \-> decltype(std::declval< \fBarg_mapper\fP >()\&.map(named_arg\&.value))"
.br
.ti -1c
.RI "auto \fBmap\fP (\&.\&.\&.) \-> \fBunformattable\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
