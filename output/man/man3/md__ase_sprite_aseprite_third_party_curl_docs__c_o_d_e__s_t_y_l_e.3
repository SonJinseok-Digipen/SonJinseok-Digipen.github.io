.TH "md__ase_sprite_aseprite_third_party_curl_docs__c_o_d_e__s_t_y_l_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_curl_docs__c_o_d_e__s_t_y_l_e \- curl C code style 
.PP
Source code that has a common style is easier to read than code that uses different styles in different places\&. It helps making the code feel like one single code base\&. Easy-to-read is a very important property of code and helps making it easier to review when new things are added and it helps debugging code when developers are trying to figure out why things go wrong\&. \fBA\fP unified style is more important than individual contributors having their own personal tastes satisfied\&.
.PP
Our C code has a few style rules\&. Most of them are verified and upheld by the \fClib/checksrc\&.pl\fP script\&. Invoked with \fCmake checksrc\fP or even by default by the build system when built after \fC\&./configure --enable-debug\fP has been used\&.
.PP
It is normally not a problem for anyone to follow the guidelines, as you just need to copy the style already used in the source code and there are no particularly unusual rules in our set of rules\&.
.PP
We also work hard on writing code that are warning-free on all the major platforms and in general on as many platforms as possible\&. Code that obviously will cause warnings will not be accepted as-is\&.
.SH "Naming"
.PP
Try using a non-confusing naming scheme for your new functions and variable names\&. It doesn't necessarily have to mean that you should use the same as in other places of the code, just that the names should be logical, understandable and be named according to what they're used for\&. File-local functions should be made static\&. We like lower case names\&.
.PP
See the \fCINTERNALS\fP document on how we name non-exported library-global symbols\&.
.SH "Indenting"
.PP
We use only spaces for indentation, never TABs\&. We use two spaces for each new open brace\&.
.PP
.PP
.nf
if(something_is_true) {
  while(second_statement == fine) {
    moo();
  }
}
.fi
.PP
.SH "Comments"
.PP
Since we write C89 code, **//** comments are not allowed\&. They weren't introduced in the C standard until C99\&. We use only __/* comments */__\&.
.PP
.PP
.nf
/* this is a comment */
.fi
.PP
.SH "Long lines"
.PP
Source code in curl may never be wider than 79 columns and there are two reasons for maintaining this even in the modern era of very large and high resolution screens:
.PP
.IP "1." 4
Narrower columns are easier to read than very wide ones\&. There's a reason newspapers have used columns for decades or centuries\&.
.IP "2." 4
Narrower columns allow developers to easier show multiple pieces of code next to each other in different windows\&. I often have two or three source code windows next to each other on the same screen - as well as multiple terminal and debugging windows\&.
.PP
.SH "Braces"
.PP
In if/while/do/for expressions, we write the open brace on the same line as the keyword and we then set the closing brace on the same indentation level as the initial keyword\&. Like this:
.PP
.PP
.nf
if(age < 40) {
  /* clearly a youngster */
}
.fi
.PP
.PP
You may omit the braces if they would contain only a one-line statement:
.PP
.PP
.nf
if(!x)
  continue;
.fi
.PP
.PP
For functions the opening brace should be on a separate line:
.PP
.PP
.nf
int main(int argc, char **argv)
{
  return 1;
}
.fi
.PP
.SH "'else' on the following line"
.PP
When adding an \fBelse\fP clause to a conditional expression using braces, we add it on a new line after the closing brace\&. Like this:
.PP
.PP
.nf
if(age < 40) {
  /* clearly a youngster */
}
else {
  /* probably grumpy */
}
.fi
.PP
.SH "No space before parentheses"
.PP
When writing expressions using if/while/do/for, there shall be no space between the keyword and the open parenthesis\&. Like this:
.PP
.PP
.nf
while(1) {
  /* loop forever */
}
.fi
.PP
.SH "Use boolean conditions"
.PP
Rather than test a conditional value such as a bool against TRUE or FALSE, a pointer against NULL or != NULL and an int against zero or not zero in if/while conditions we prefer:
.PP
.PP
.nf
result = do_something();
if(!result) {
  /* something went wrong */
  return result;
}
.fi
.PP
.SH "No assignments in conditions"
.PP
To increase readability and reduce complexity of conditionals, we avoid assigning variables within if/while conditions\&. We frown upon this style:
.PP
.PP
.nf
if((ptr = malloc(100)) == NULL)
  return NULL;
.fi
.PP
.PP
and instead we encourage the above version to be spelled out more clearly:
.PP
.PP
.nf
ptr = malloc(100);
if(!ptr)
  return NULL;
.fi
.PP
.SH "New block on a new line"
.PP
We never write multiple statements on the same source line, even for very short if() conditions\&.
.PP
.PP
.nf
if(a)
  return TRUE;
else if(b)
  return FALSE;
.fi
.PP
.PP
and NEVER:
.PP
.PP
.nf
if(a) return TRUE;
else if(b) return FALSE;
.fi
.PP
.SH "Space around operators"
.PP
Please use spaces on both sides of operators in C expressions\&. Postfix **(), [], ->, \&., ++, --** and Unary \fB+, -, !, ~, &\fP operators excluded they should have no space\&.
.PP
Examples:
.PP
.PP
.nf
bla = func();
who = name[0];
age += 1;
true = !false;
size += \-2 + 3 * (a + b);
ptr\->member = a++;
struct\&.field = b\-\-;
ptr = &address;
contents = *pointer;
complement = ~bits;
empty = (!*string) ? TRUE : FALSE;
.fi
.PP
.SH "No parentheses for return values"
.PP
We use the 'return' statement without extra parentheses around the value:
.PP
.PP
.nf
int works(void)
{
  return TRUE;
}
.fi
.PP
.SH "Parentheses for sizeof arguments"
.PP
When using the sizeof operator in code, we prefer it to be written with parentheses around its argument:
.PP
.PP
.nf
int size = sizeof(int);
.fi
.PP
.SH "Column alignment"
.PP
Some statements cannot be completed on a single line because the line would be too long, the statement too hard to read, or due to other style guidelines above\&. In such a case the statement will span multiple lines\&.
.PP
If a continuation line is part of an expression or sub-expression then you should align on the appropriate column so that it's easy to tell what part of the statement it is\&. Operators should not start continuation lines\&. In other cases follow the 2-space indent guideline\&. Here are some examples from libcurl:
.PP
.PP
.nf
if(Curl_pipeline_wanted(handle\->multi, CURLPIPE_HTTP1) &&
   (handle\->set\&.httpversion != CURL_HTTP_VERSION_1_0) &&
   (handle\->set\&.httpreq == HTTPREQ_GET ||
    handle\->set\&.httpreq == HTTPREQ_HEAD))
  /* didn't ask for HTTP/1\&.0 and a GET or HEAD */
  return TRUE;
.fi
.PP
.PP
If no parenthesis, use the default indent:
.PP
.PP
.nf
data\->set\&.http_disable_hostname_check_before_authentication =
  (0 != va_arg(param, long)) ? TRUE : FALSE;
.fi
.PP
.PP
Function invoke with an open parenthesis:
.PP
.PP
.nf
if(option) {
  result = parse_login_details(option, strlen(option),
                               (userp ? &user : NULL),
                               (passwdp ? &passwd : NULL),
                               NULL);
}
.fi
.PP
.PP
Align with the 'current open' parenthesis:
.PP
.PP
.nf
DEBUGF(infof(data, "Curl_pp_readresp_ %d bytes of trailing "
             "server response left\\n",
             (int)clipamount));
.fi
.PP
.SH "Platform dependent code"
.PP
Use **#ifdef HAVE_FEATURE** to do conditional code\&. We avoid checking for particular operating systems or hardware in the #ifdef lines\&. The HAVE_FEATURE shall be generated by the configure script for unix-like systems and they are hard-coded in the \fCconfig-[system]\&.h\fP files for the others\&.
.PP
We also encourage use of macros/functions that possibly are empty or defined to constants when libcurl is built without that feature, to make the code seamless\&. Like this example where the \fBmagic()\fP function works differently depending on a build-time conditional:
.PP
.PP
.nf
#ifdef HAVE_MAGIC
void magic(int a)
{
  return a + 2;
}
#else
#define magic(x) 1
#endif

int content = magic(3);
.fi
.PP
.SH "No typedefed structs"
.PP
Use structs by all means, but do not typedef them\&. Use the \fCstruct name\fP way of identifying them:
.PP
.PP
.nf
struct something {
   void *valid;
   size_t way_to_write;
};
struct something instance;
.fi
.PP
.PP
\fBNot okay\fP:
.PP
.PP
.nf
typedef struct {
   void *wrong;
   size_t way_to_write;
} something;
something instance;
.fi
.PP
 
