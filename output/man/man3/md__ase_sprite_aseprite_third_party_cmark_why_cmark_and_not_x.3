.TH "md__ase_sprite_aseprite_third_party_cmark_why_cmark_and_not_x" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_cmark_why_cmark_and_not_x \- Why use \fCcmark\fP and not X? 
.PP

.SH "<tt>hoedown</tt>"
.PP
\fChoedown\fP (which derives from \fCsundown\fP) is slightly faster than \fCcmark\fP in our benchmarks (0\&.21s vs\&. 0\&.29s)\&. But both are much faster than any other available implementations\&.
.PP
\fChoedown\fP boasts of including 'protection against all possible
DOS attacks,' but there are some chinks in the armor: 
.PP
.nf
% time python -c 'print(('[' * 50000) + 'a' + (']' * 50000))' | cmark
\&.\&.\&.
user 0m0\&.073s
% time python -c 'print(('[' * 50000) + 'a' + (']' * 50000))' | hoedown
\&.\&.\&.
0m17\&.84s

.fi
.PP
 \fChoedown\fP has many parsing bugs\&. Here is a selection (as of v3\&.0\&.3): 
.PP
.nf
% hoedown
- one
  - two
    1\&. three
^D
<ul>
<li>one

<ul>
<li>two</li>
<li>three</li>
</ul></li>
</ul>


% hoedown
## hi\\###
^D
<h2>hi\\</h2>


% hoedown
[ΑΓΩ]: /φου

[αγω]
^D
<p>[αγω]</p>


% hoedown
```
[foo]: /url
```

[foo]
^D
<p>```</p>

<p>```</p>

<p><a href='/url'>foo</a></p>


% hoedown
[foo](url 'ti\\*tle')
^D
<p><a href='url' title='ti\\*tle'>foo</a></p>


% \&./hoedown
- one
 - two
  - three
   - four
^D
<ul>
<li>one

<ul>
<li>two</li>
<li>three</li>
<li>four</li>
</ul></li>
</ul>

.fi
.PP
.SH "<tt>discount</tt>"
.PP
\fCcmark\fP is about six times faster\&.
.SH "<tt>kramdown</tt>"
.PP
\fCcmark\fP is about a hundred times faster\&.
.PP
\fCkramdown\fP also gets tied in knots by pathological input like 
.PP
.nf
python -c 'print(('[' * 50000) + 'a' + (']' * 50000))'

.fi
.PP
 
