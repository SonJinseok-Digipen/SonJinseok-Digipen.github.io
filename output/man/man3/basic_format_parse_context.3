.TH "basic_format_parse_context< Char, ErrorHandler >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_format_parse_context< Char, ErrorHandler >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <core\&.h>\fP
.PP
Inherits detail::error_handler\&.
.PP
Inherited by \fBbasic_printf_parse_context< Char >\fP, and \fBcompile_parse_context< Char, ErrorHandler >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Char, typename ErrorHandler = detail::error_handler>
.br
class basic_format_parse_context< Char, ErrorHandler >"\\rst Parsing context consisting of a format string range being parsed and an argument counter for automatic indexing\&. You can use the \fCformat_parse_context\fP type alias for \fCchar\fP instead\&. \\endrst 
.SH "Member Function Documentation"
.PP 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::advance_to (iterator it)\fC [inline]\fP"
Advances the begin iterator to \fCit\fP\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::advance_to (iterator it)\fC [inline]\fP"
Advances the begin iterator to \fCit\fP\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::advance_to (iterator it)\fC [inline]\fP"
Advances the begin iterator to \fCit\fP\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::advance_to (iterator it)\fC [inline]\fP"
Advances the begin iterator to \fCit\fP\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::begin () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator to the beginning of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::begin () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator to the beginning of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::begin () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator to the beginning of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::begin () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator to the beginning of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::check_arg_id (int id)\fC [inline]\fP"
Reports an error if using the automatic argument indexing; otherwise switches to the manual indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::check_arg_id (int id)\fC [inline]\fP"
Reports an error if using the automatic argument indexing; otherwise switches to the manual indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::check_arg_id (int id)\fC [inline]\fP"
Reports an error if using the automatic argument indexing; otherwise switches to the manual indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR void \fBbasic_format_parse_context\fP< Char, ErrorHandler >::check_arg_id (int id)\fC [inline]\fP"
Reports an error if using the automatic argument indexing; otherwise switches to the manual indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::end () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator past the end of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::end () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator past the end of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::end () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator past the end of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> constexpr auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::end () const \-> iterator \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"
Returns an iterator past the end of the format string range being parsed\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::next_arg_id () \-> int \fC [inline]\fP"
Reports an error if using the manual argument indexing; otherwise returns the next argument index and switches to the automatic indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::next_arg_id () \-> int \fC [inline]\fP"
Reports an error if using the manual argument indexing; otherwise returns the next argument index and switches to the automatic indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::next_arg_id () \-> int \fC [inline]\fP"
Reports an error if using the manual argument indexing; otherwise returns the next argument index and switches to the automatic indexing\&. 
.SS "template<typename Char , typename ErrorHandler  = detail::error_handler> FMT_CONSTEXPR auto \fBbasic_format_parse_context\fP< Char, ErrorHandler >::next_arg_id () \-> int \fC [inline]\fP"
Reports an error if using the manual argument indexing; otherwise returns the next argument index and switches to the automatic indexing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
