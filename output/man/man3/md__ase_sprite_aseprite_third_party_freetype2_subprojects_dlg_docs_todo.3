.TH "md__ase_sprite_aseprite_third_party_freetype2_subprojects_dlg_docs_todo" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_freetype2_subprojects_dlg_docs_todo \- Ideas and todo 
.PP

.IP "\(bu" 2
[x] return int from dlg printf wrappers
.IP "\(bu" 2
[x] windows utf-8 output (see ny)
.IP "\(bu" 2
[x] windows text style support
.IP "\(bu" 2
[x] assert without error message
.IP "\(bu" 2
[x] add real example and screenshot
.IP "\(bu" 2
[x] custom (changeable) base paths (for nested projects/header calls) \fB[DLG_FILE]\fP
.IP "\(bu" 2
[x] possibility to get current scope (or more general: exception support)
.IP "\(bu" 2
[x] make default scope signs customizable by macro
.IP "\(bu" 2
[x] unit tests (at least some basic stuff) + ci (travis)
.IP "\(bu" 2
[x] c example
.IP "  \(bu" 4
[ ] Could be extended\&. Examples can generally be improved/reworked
.PP

.IP "\(bu" 2
[x] extend testing (mainly tag setting scope)
.IP "  \(bu" 4
test all macros (also disable and stuff)
.PP

.IP "\(bu" 2
[x] fix c++ example
.IP "\(bu" 2
[x] release version 0\&.2\&.0
.IP "\(bu" 2
[x] add appveyor testing (for mingw as well as visual studio)
.IP "\(bu" 2
[x] decide on whether to catch exceptions from assert expressions\&. \fBConfig\fP variable?
.IP "  \(bu" 4
Yeah, don't do it\&. We are c now
.PP

.IP "\(bu" 2
[x] make dlg\&.c valid c++ (mainly casting issues atm)
.IP "\(bu" 2
[x] update README picture
.IP "\(bu" 2
[ ] Fix all todos in dlg\&.c (mainly error handling questions)
.IP "  \(bu" 4
[ ] Check GetLastError with winapi functions?
.PP

.IP "\(bu" 2
[x] contrib file that implements android log handler (using android liblog)
.IP "\(bu" 2
[ ] make wsl output faster\&. It currently triggers a WriteConsole error on every output and then falls back to default, performing the formatting twice
.IP "\(bu" 2
[ ] get stable (or make a list of what to do for 1\&.0)
.PP
.SS "Kinda trashed ideas"
Just because you can something, doesn't mean you should, right?
.PP
.IP "\(bu" 2
[ ] Default dummy platform (fallback if neither unix nor windows detected)
.IP "\(bu" 2
[ ] rework/further strip fmt\&.hpp
.IP "  \(bu" 4
[ ] since it is parsed to some type-erased list anyways, don't include the whole header
.IP "  \(bu" 4
[ ] constexpr string parsing \fB[Not really worth it/fully possible i guess]\fP
.IP "    \(bu" 6
[ ] warn about format issues
.IP "    \(bu" 6
[ ] warn about unused but passed variables
.PP

.PP

.IP "\(bu" 2
[ ] add field to Origin that determines whether the origin is inside a dlg::check block?
.IP "\(bu" 2
[ ] add at least really simply pattern matching utility function for tags?
.IP "\(bu" 2
[ ] make dlg_assert return false on failure
.IP "  \(bu" 4
not that easy to accomplish actually since we use an if, if we would use ? : we would get an unused expression warning if it is not used\&. Not worth it
.PP

.IP "\(bu" 2
[ ] compile time format specifier validation (c++) instead of exceptions
.IP "  \(bu" 4
really no way to implement it that is at least somewhat safe
.PP

.IP "\(bu" 2
[ ] assert_failed function (maybe as c symbol) that can be easily used as breakpoint
.IP "  \(bu" 4
[ ] Also custom assertion handler? that is called inline (macro) and might throw?
.IP "  \(bu" 4
[ ] example for custom failed assertion handle, i\&.e\&. print backtrace/exception/abort
.IP "  \(bu" 4
Decided not worth it since all of this can already be achieved in the log handler\&. If you want an assert failed breakpoint, just check for expr in the log handler and depending on level call a function to set a breakpoint on\&. See notes\&.md for some first concepts though 
.PP

.PP

