.TH "printf_arg_formatter< OutputIt, Char >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
printf_arg_formatter< OutputIt, Char >
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBarg_formatter< Char >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBprintf_arg_formatter\fP (OutputIt iter, \fBformat_specs\fP &s, \fBcontext_type\fP &ctx)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBmonostate\fP \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBdetail::is_integral\fP< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_floating_point< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const char *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const wchar_t *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBbasic_string_view\fP< Char > \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const void *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)"
.br
.ti -1c
.RI "\fBprintf_arg_formatter\fP (OutputIt iter, \fBformat_specs\fP &s, \fBcontext_type\fP &ctx)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBmonostate\fP \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBdetail::is_integral\fP< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_floating_point< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const char *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const wchar_t *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBbasic_string_view\fP< Char > \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const void *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)"
.br
.ti -1c
.RI "\fBprintf_arg_formatter\fP (OutputIt iter, \fBformat_specs\fP &s, \fBcontext_type\fP &ctx)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBmonostate\fP \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBdetail::is_integral\fP< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_floating_point< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const char *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const wchar_t *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBbasic_string_view\fP< Char > \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const void *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)"
.br
.ti -1c
.RI "\fBprintf_arg_formatter\fP (OutputIt iter, \fBformat_specs\fP &s, \fBcontext_type\fP &ctx)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBmonostate\fP \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(\fBdetail::is_integral\fP< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "template<typename T , FMT_ENABLE_IF(std::is_floating_point< T >\fB::value\fP) > OutputIt \fBoperator()\fP (T \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const char *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const wchar_t *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (\fBbasic_string_view\fP< Char > \fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (const void *\fBvalue\fP)"
.br
.ti -1c
.RI "OutputIt \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)"
.br
.in -1c

Public Member Functions inherited from \fBarg_formatter< Char >\fP
.in +1c
.ti -1c
.RI "template<typename T > FMT_CONSTEXPR FMT_INLINE auto \fBoperator()\fP (T \fBvalue\fP) \-> iterator"
.br
.ti -1c
.RI "auto \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext\fP >::handle) \-> iterator"
.br
.ti -1c
.RI "template<typename T > FMT_CONSTEXPR FMT_INLINE auto \fBoperator()\fP (T \fBvalue\fP) \-> iterator"
.br
.ti -1c
.RI "auto \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext\fP >::handle) \-> iterator"
.br
.ti -1c
.RI "template<typename T > FMT_CONSTEXPR FMT_INLINE auto \fBoperator()\fP (T \fBvalue\fP) \-> iterator"
.br
.ti -1c
.RI "auto \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext\fP >::handle) \-> iterator"
.br
.ti -1c
.RI "template<typename T > FMT_CONSTEXPR FMT_INLINE auto \fBoperator()\fP (T \fBvalue\fP) \-> iterator"
.br
.ti -1c
.RI "auto \fBoperator()\fP (typename \fBbasic_format_arg\fP< \fBcontext\fP >::handle) \-> iterator"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBarg_formatter< Char >\fP
.in +1c
.ti -1c
.RI "using \fBiterator\fP = buffer_appender< Char >"
.br
.ti -1c
.RI "using \fBcontext\fP = \fBbuffer_context\fP< Char >"
.br
.ti -1c
.RI "using \fBiterator\fP = buffer_appender< Char >"
.br
.ti -1c
.RI "using \fBcontext\fP = \fBbuffer_context\fP< Char >"
.br
.ti -1c
.RI "using \fBiterator\fP = buffer_appender< Char >"
.br
.ti -1c
.RI "using \fBcontext\fP = \fBbuffer_context\fP< Char >"
.br
.ti -1c
.RI "using \fBiterator\fP = buffer_appender< Char >"
.br
.ti -1c
.RI "using \fBcontext\fP = \fBbuffer_context\fP< Char >"
.br
.in -1c

Public Attributes inherited from \fBarg_formatter< Char >\fP
.in +1c
.ti -1c
.RI "iterator \fBout\fP"
.br
.ti -1c
.RI "const \fBbasic_format_specs\fP< Char > & \fBspecs\fP"
.br
.ti -1c
.RI "\fBlocale_ref\fP \fBlocale\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const char * value)\fC [inline]\fP"
Formats a null-terminated C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const char * value)\fC [inline]\fP"
Formats a null-terminated C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const char * value)\fC [inline]\fP"
Formats a null-terminated C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const char * value)\fC [inline]\fP"
Formats a null-terminated C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const void * value)\fC [inline]\fP"
Formats a pointer\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const void * value)\fC [inline]\fP"
Formats a pointer\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const void * value)\fC [inline]\fP"
Formats a pointer\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const void * value)\fC [inline]\fP"
Formats a pointer\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const wchar_t * value)\fC [inline]\fP"
Formats a null-terminated wide C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const wchar_t * value)\fC [inline]\fP"
Formats a null-terminated wide C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const wchar_t * value)\fC [inline]\fP"
Formats a null-terminated wide C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (const wchar_t * value)\fC [inline]\fP"
Formats a null-terminated wide C string\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)\fC [inline]\fP"
Formats an argument of a custom (user-defined) type\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)\fC [inline]\fP"
Formats an argument of a custom (user-defined) type\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)\fC [inline]\fP"
Formats an argument of a custom (user-defined) type\&. 
.SS "template<typename OutputIt , typename Char > OutputIt \fBprintf_arg_formatter\fP< OutputIt, Char >::operator() (typename \fBbasic_format_arg\fP< \fBcontext_type\fP >::handle handle)\fC [inline]\fP"
Formats an argument of a custom (user-defined) type\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
