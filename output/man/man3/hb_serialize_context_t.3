.TH "hb_serialize_context_t" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hb_serialize_context_t
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBobject_t\fP"
.br
.ti -1c
.RI "struct \fBsnapshot_t\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBwhence_t\fP { \fBHead\fP, \fBTail\fP, \fBAbsolute\fP }"
.br
.ti -1c
.RI "typedef unsigned \fBobjidx_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsnapshot_t\fP \fBsnapshot\fP ()"
.br
.ti -1c
.RI "\fBhb_serialize_context_t\fP (void *start_, unsigned int size)"
.br
.ti -1c
.RI "void \fBfini\fP ()"
.br
.ti -1c
.RI "bool \fBin_error\fP () const"
.br
.ti -1c
.RI "bool \fBsuccessful\fP () const"
.br
.ti -1c
.RI "HB_NODISCARD bool \fBran_out_of_room\fP () const"
.br
.ti -1c
.RI "HB_NODISCARD bool \fBoffset_overflow\fP () const"
.br
.ti -1c
.RI "HB_NODISCARD bool \fBonly_offset_overflow\fP () const"
.br
.ti -1c
.RI "HB_NODISCARD bool \fBonly_overflow\fP () const"
.br
.ti -1c
.RI "void \fBreset\fP (void *start_, unsigned int size)"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "bool \fBcheck_success\fP (bool success, hb_serialize_error_t err_type=HB_SERIALIZE_ERROR_OTHER)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > bool \fBcheck_equal\fP (T1 &&v1, T2 &&v2, hb_serialize_error_t err_type)"
.br
.ti -1c
.RI "template<typename T1 , typename T2 > bool \fBcheck_assign\fP (T1 &v1, T2 &&v2, hb_serialize_error_t err_type)"
.br
.ti -1c
.RI "template<typename T > bool \fBpropagate_error\fP (T &&obj)"
.br
.ti -1c
.RI "template<typename T1 , typename\&.\&.\&. Ts> bool \fBpropagate_error\fP (T1 &&o1, Ts &&\&.\&.\&. os)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBstart_serialize\fP ()"
.br
.ti -1c
.RI "void \fBend_serialize\fP ()"
.br
.ti -1c
.RI "template<typename Type  = void> Type * \fBpush\fP ()"
.br
.ti -1c
.RI "void \fBpop_discard\fP ()"
.br
.ti -1c
.RI "objidx_t \fBpop_pack\fP (bool share=true)"
.br
.ti -1c
.RI "void \fBrevert\fP (\fBsnapshot_t\fP snap)"
.br
.ti -1c
.RI "void \fBrevert\fP (char *snap_head, char *snap_tail)"
.br
.ti -1c
.RI "void \fBdiscard_stale_objects\fP ()"
.br
.ti -1c
.RI "void \fBadd_virtual_link\fP (objidx_t objidx)"
.br
.ti -1c
.RI "template<typename T > void \fBadd_link\fP (T &ofs, objidx_t objidx, whence_t whence=Head, unsigned bias=0)"
.br
.ti -1c
.RI "unsigned \fBto_bias\fP (const void *base) const"
.br
.ti -1c
.RI "void \fBresolve_links\fP ()"
.br
.ti -1c
.RI "unsigned int \fBlength\fP () const"
.br
.ti -1c
.RI "void \fBalign\fP (unsigned int alignment)"
.br
.ti -1c
.RI "template<typename Type  = void> Type * \fBstart_embed\fP (const Type *obj HB_UNUSED=nullptr) const"
.br
.ti -1c
.RI "template<typename Type > Type * \fBstart_embed\fP (const Type &obj) const"
.br
.ti -1c
.RI "bool \fBerr\fP (hb_serialize_error_t err_type)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBallocate_size\fP (size_t size)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBallocate_min\fP ()"
.br
.ti -1c
.RI "template<typename Type > Type * \fBembed\fP (const Type *obj)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBembed\fP (const Type &obj)"
.br
.ti -1c
.RI "template<typename Type , typename \&.\&.\&. Ts> auto \fB_copy\fP (const Type &src, \fBhb_priority\fP< 1 >, Ts &&\&.\&.\&. ds) HB_RETURN(Type *"
.br
.ti -1c
.RI "auto src \fBcopy\fP (this, std::forward< Ts >(ds)\&.\&.\&.)) template< typename Type > auto _copy(const Type &src"
.br
.ti -1c
.RI "auto src \fBhb_priority\fP< 0 > decltype(&(hb_declval< Type >()=src)) \fBif\fP (unlikely(!ret)) return nullptr"
.br
.ti -1c
.RI "template<typename Type , typename \&.\&.\&. Ts> Type * \fBcopy\fP (const Type &src, Ts &&\&.\&.\&. ds)"
.br
.ti -1c
.RI "template<typename Type , typename \&.\&.\&. Ts> Type * \fBcopy\fP (const Type *src, Ts &&\&.\&.\&. ds)"
.br
.ti -1c
.RI "template<typename Iterator , hb_requires(hb_is_iterator(Iterator)) , typename \&.\&.\&. Ts> void \fBcopy_all\fP (Iterator it, Ts &&\&.\&.\&. ds)"
.br
.ti -1c
.RI "template<typename Type > \fBhb_serialize_context_t\fP & \fBoperator<<\fP (const Type &obj) &"
.br
.ti -1c
.RI "template<typename Type > Type * \fBextend_size\fP (Type *obj, size_t size)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBextend_size\fP (Type &obj, size_t size)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBextend_min\fP (Type *obj)"
.br
.ti -1c
.RI "template<typename Type > Type * \fBextend_min\fP (Type &obj)"
.br
.ti -1c
.RI "template<typename Type , typename \&.\&.\&. Ts> Type * \fBextend\fP (Type *obj, Ts &&\&.\&.\&. ds)"
.br
.ti -1c
.RI "template<typename Type , typename \&.\&.\&. Ts> Type * \fBextend\fP (Type &obj, Ts &&\&.\&.\&. ds)"
.br
.ti -1c
.RI "\fBhb_bytes_t\fP \fBcopy_bytes\fP () const"
.br
.ti -1c
.RI "template<typename Type > Type * \fBcopy\fP () const"
.br
.ti -1c
.RI "\fBhb_blob_t\fP * \fBcopy_blob\fP () const"
.br
.ti -1c
.RI "const \fBhb_vector_t\fP< \fBobject_t\fP * > & \fBobject_graph\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "* \fBret\fP = src"
.br
.ti -1c
.RI "return \fBret\fP"
.br
.ti -1c
.RI "char * \fBstart\fP"
.br
.ti -1c
.RI "char * \fBhead\fP"
.br
.ti -1c
.RI "char * \fBtail\fP"
.br
.ti -1c
.RI "char * \fBend\fP"
.br
.ti -1c
.RI "unsigned int \fBdebug_depth\fP"
.br
.ti -1c
.RI "hb_serialize_error_t \fBerrors\fP"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
