.TH "md__ase_sprite_aseprite_third_party_fmt_support_bazel__r_e_a_d_m_e" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_fmt_support_bazel__r_e_a_d_m_e \- Bazel support 
.PP
To get \fCBazel\fP working with {fmt} you can copy the files \fCBUILD\&.bazel\fP, \fCWORKSPACE\&.bazel\fP, \fC\&.bazelrc\fP, and \fC\&.bazelversion\fP from this folder (\fCsupport/bazel\fP) to the root folder of this project\&. This way {fmt} gets bazelized and can be used with Bazel (e\&.g\&. doing a \fCbazel build //\&.\&.\&.\fP on {fmt})\&.
.SH "Using {fmt} as a dependency"
.PP
The following minimal example shows how to use {fmt} as a dependency within a Bazel project\&.
.PP
The following file structure is assumed:
.PP
.PP
.nf
example
├── BUILD\&.bazel
├── main\&.cpp
└── WORKSPACE\&.bazel
.fi
.PP
.PP
\fImain\&.cpp\fP:
.PP
.PP
.nf
 {c++}
#include "fmt/core\&.h"

int main() {
  fmt::print("The answer is {}\\n", 42);
}
.fi
.PP
.PP
The expected output of this example is \fCThe answer is 42\fP\&.
.PP
\fIWORKSPACE\&.bazel\fP:
.PP
.PP
.nf
load("@bazel_tools//tools/build_defs/repo:git\&.bzl", "git_repository")

git_repository(
    name = "fmt",
    branch = "master",
    remote = "https://github\&.com/fmtlib/fmt",
    patch_cmds = [
        "mv support/bazel/\&.bazelrc \&.bazelrc",
        "mv support/bazel/\&.bazelversion \&.bazelversion",
        "mv support/bazel/BUILD\&.bazel BUILD\&.bazel",
        "mv support/bazel/WORKSPACE\&.bazel WORKSPACE\&.bazel",
    ],
    # Windows\-related patch commands are only needed in the case MSYS2 is not installed\&.
    # More details about the installation process of MSYS2 on Windows systems can be found here:
    # https://docs\&.bazel\&.build/versions/main/install\-windows\&.html#installing\-compilers\-and\-language\-runtimes
    # Even if MSYS2 is installed the Windows related patch commands can still be used\&.
    patch_cmds_win = [
        "Move\-Item \-Path support/bazel/\&.bazelrc \-Destination \&.bazelrc",
        "Move\-Item \-Path support/bazel/\&.bazelversion \-Destination \&.bazelversion",
        "Move\-Item \-Path support/bazel/BUILD\&.bazel \-Destination BUILD\&.bazel",
        "Move\-Item \-Path support/bazel/WORKSPACE\&.bazel \-Destination WORKSPACE\&.bazel",
    ],
)
.fi
.PP
.PP
In the \fIWORKSPACE\fP file, the {fmt} GitHub repository is fetched\&. Using the attribute \fCpatch_cmds\fP the files \fCBUILD\&.bazel\fP, \fCWORKSPACE\&.bazel\fP, \fC\&.bazelrc\fP, and \fC\&.bazelversion\fP are moved to the root of the {fmt} repository\&. This way the {fmt} repository is recognized as a bazelized workspace\&.
.PP
\fIBUILD\&.bazel\fP:
.PP
.PP
.nf
cc_binary(
    name = "Demo",
    srcs = ["main\&.cpp"],
    deps = ["@fmt"],
)
.fi
.PP
.PP
The \fIBUILD\fP file defines a binary named \fCDemo\fP that has a dependency to {fmt}\&.
.PP
To execute the binary you can run \fCbazel run //:Demo\fP\&. 
