.TH "hb_array_t< Type >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hb_array_t< Type >
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBhb_iter_with_fallback_t< hb_array_t< Type >, Type & >\fP\&.
.PP
Inherited by \fBCFF::byte_str_t\fP, and \fBhb_sorted_array_t< Type >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Type & \fB__item_t__\fP"
.br
.in -1c

Public Types inherited from \fBhb_iter_t< iter_t, Item >\fP
.in +1c
.ti -1c
.RI "typedef Item \fBitem_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBhb_array_t\fP (const \fBhb_array_t\fP &)=default"
.br
.ti -1c
.RI "\fBhb_array_t\fP & \fBoperator=\fP (const \fBhb_array_t\fP &)=default"
.br
.ti -1c
.RI "\fBhb_array_t\fP & \fBoperator=\fP (\fBhb_array_t\fP &&)=default"
.br
.ti -1c
.RI "constexpr \fBhb_array_t\fP (std::nullptr_t)"
.br
.ti -1c
.RI "constexpr \fBhb_array_t\fP (Type *array_, unsigned int length_)"
.br
.ti -1c
.RI "template<unsigned int length_> constexpr \fBhb_array_t\fP (Type(&array_)[length_])"
.br
.ti -1c
.RI "template<typename U , \fBhb_enable_if\fP(\fBhb_is_cr_convertible\fP(U, Type)) > constexpr \fBhb_array_t\fP (const \fBhb_array_t\fP< U > &o)"
.br
.ti -1c
.RI "template<typename U , \fBhb_enable_if\fP(\fBhb_is_cr_convertible\fP(U, Type)) > \fBhb_array_t\fP & \fBoperator=\fP (const \fBhb_array_t\fP< U > &o)"
.br
.ti -1c
.RI "Type & \fB__item_at__\fP (unsigned i) const"
.br
.ti -1c
.RI "void \fB__forward__\fP (unsigned n)"
.br
.ti -1c
.RI "void \fB__rewind__\fP (unsigned n)"
.br
.ti -1c
.RI "unsigned \fB__len__\fP () const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBhb_array_t\fP &o) const"
.br
.ti -1c
.RI "Type * \fBoperator&\fP () const"
.br
.ti -1c
.RI "\fBoperator hb_array_t< const Type >\fP ()"
.br
.ti -1c
.RI "template<typename T > \fBoperator T*\fP () const"
.br
.ti -1c
.RI "HB_INTERNAL bool \fBoperator==\fP (const \fBhb_array_t\fP &o) const"
.br
.ti -1c
.RI "uint32_t \fBhash\fP () const"
.br
.ti -1c
.RI "int \fBcmp\fP (const \fBhb_array_t\fP &\fBa\fP) const"
.br
.ti -1c
.RI "template<typename T > Type * \fBlsearch\fP (const T &x, Type *not_found=nullptr)"
.br
.ti -1c
.RI "template<typename T > const Type * \fBlsearch\fP (const T &x, const Type *not_found=nullptr) const"
.br
.ti -1c
.RI "template<typename T > bool \fBlfind\fP (const T &x, unsigned *pos=nullptr, hb_not_found_t not_found=HB_NOT_FOUND_DONT_STORE, unsigned int to_store=(unsigned int) \-1) const"
.br
.ti -1c
.RI "\fBhb_sorted_array_t\fP< Type > \fBqsort\fP (int(*cmp_)(const void *, const void *))"
.br
.ti -1c
.RI "\fBhb_sorted_array_t\fP< Type > \fBqsort\fP ()"
.br
.ti -1c
.RI "void \fBqsort\fP (unsigned int start, unsigned int end)"
.br
.ti -1c
.RI "unsigned int \fBget_size\fP () const"
.br
.ti -1c
.RI "void \fBreverse\fP (unsigned start=0, unsigned end=\-1)"
.br
.ti -1c
.RI "\fBhb_array_t\fP \fBsub_array\fP (unsigned int start_offset=0, unsigned int *seg_count=nullptr) const"
.br
.ti -1c
.RI "\fBhb_array_t\fP \fBsub_array\fP (unsigned int start_offset, unsigned int seg_count) const"
.br
.ti -1c
.RI "\fBhb_array_t\fP \fBtruncate\fP (unsigned length) const"
.br
.ti -1c
.RI "template<typename T , unsigned P = sizeof (Type), \fBhb_enable_if\fP(P==1) > const T * \fBas\fP () const"
.br
.ti -1c
.RI "template<typename T , unsigned P = sizeof (Type), \fBhb_enable_if\fP(P==1) > bool \fBcheck_range\fP (const T *p, unsigned int size=T::static_size) const"
.br
.ti -1c
.RI "void \fBfini\fP ()"
.br
.ti -1c
.RI "template<typename \fBhb_serialize_context_t\fP > \fBhb_array_t\fP \fBcopy\fP (\fBhb_serialize_context_t\fP *c) const"
.br
.ti -1c
.RI "template<typename \fBhb_sanitize_context_t\fP > bool \fBsanitize\fP (\fBhb_sanitize_context_t\fP *c) const"
.br
.ti -1c
.RI "uint32_t \fBhash\fP () const"
.br
.ti -1c
.RI "uint32_t \fBhash\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBhb_iter_t< iter_t, Item >\fP
.in +1c
.ti -1c
.RI "constexpr unsigned \fBget_item_size\fP () const"
.br
.ti -1c
.RI "iter_t \fBiter\fP () const"
.br
.ti -1c
.RI "iter_t \fBoperator+\fP () const"
.br
.ti -1c
.RI "iter_t \fBbegin\fP () const"
.br
.ti -1c
.RI "iter_t \fBend\fP () const"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "unsigned \fBlen\fP () const"
.br
.ti -1c
.RI "template<typename T  = item_t, \fBhb_enable_if\fP(std::is_reference< T >\fB::value\fP) > hb_remove_reference< item_t > * \fBoperator\->\fP () const"
.br
.ti -1c
.RI "item_t \fBoperator*\fP () const"
.br
.ti -1c
.RI "item_t \fBoperator*\fP ()"
.br
.ti -1c
.RI "item_t \fBoperator[]\fP (unsigned i) const"
.br
.ti -1c
.RI "item_t \fBoperator[]\fP (unsigned i)"
.br
.ti -1c
.RI "iter_t & \fBoperator+=\fP (unsigned count) &"
.br
.ti -1c
.RI "iter_t \fBoperator+=\fP (unsigned count) &&"
.br
.ti -1c
.RI "iter_t & \fBoperator++\fP () &"
.br
.ti -1c
.RI "iter_t \fBoperator++\fP () &&"
.br
.ti -1c
.RI "iter_t & \fBoperator\-=\fP (unsigned count) &"
.br
.ti -1c
.RI "iter_t \fBoperator\-=\fP (unsigned count) &&"
.br
.ti -1c
.RI "iter_t & \fBoperator\-\-\fP () &"
.br
.ti -1c
.RI "iter_t \fBoperator\-\-\fP () &&"
.br
.ti -1c
.RI "iter_t \fBoperator+\fP (unsigned count) const"
.br
.ti -1c
.RI "iter_t \fBoperator++\fP (int)"
.br
.ti -1c
.RI "iter_t \fBoperator\-\fP (unsigned count) const"
.br
.ti -1c
.RI "iter_t \fBoperator\-\-\fP (int)"
.br
.ti -1c
.RI "template<typename T > iter_t & \fBoperator>>\fP (T &v) &"
.br
.ti -1c
.RI "template<typename T > iter_t \fBoperator>>\fP (T &v) &&"
.br
.ti -1c
.RI "template<typename T > iter_t & \fBoperator<<\fP (const T v) &"
.br
.ti -1c
.RI "template<typename T > iter_t \fBoperator<<\fP (const T v) &&"
.br
.in -1c

Public Member Functions inherited from \fBhb_iter_fallback_mixin_t< iter_t, item_t >\fP
.in +1c
.ti -1c
.RI "item_t \fB__item__\fP () const"
.br
.ti -1c
.RI "item_t \fB__item_at__\fP (unsigned i) const"
.br
.ti -1c
.RI "bool \fB__more__\fP () const"
.br
.ti -1c
.RI "unsigned \fB__len__\fP () const"
.br
.ti -1c
.RI "void \fB__next__\fP ()"
.br
.ti -1c
.RI "void \fB__forward__\fP (unsigned n)"
.br
.ti -1c
.RI "void \fB__prev__\fP ()"
.br
.ti -1c
.RI "void \fB__rewind__\fP (unsigned n)"
.br
.ti -1c
.RI "iter_t \fB__end__\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static HB_INTERNAL int \fBcmp\fP (const void *pa, const void *pb)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "Type * \fBarrayZ\fP = nullptr"
.br
.ti -1c
.RI "unsigned int \fBlength\fP = 0"
.br
.ti -1c
.RI "unsigned int \fBbackwards_length\fP = 0"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr bool \fBis_random_access_iterator\fP = true"
.br
.in -1c

Static Public Attributes inherited from \fBhb_iter_t< iter_t, Item >\fP
.in +1c
.ti -1c
.RI "static constexpr bool \fBis_iterator\fP = true"
.br
.ti -1c
.RI "static constexpr bool \fBis_random_access_iterator\fP = false"
.br
.ti -1c
.RI "static constexpr bool \fBis_sorted_iterator\fP = false"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBhb_iter_with_fallback_t< hb_array_t< Type >, Type & >\fP
.in +1c
.ti -1c
.RI "\fBhb_iter_with_fallback_t\fP (const \fBhb_iter_with_fallback_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_with_fallback_t\fP (\fBhb_iter_with_fallback_t\fP &&o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_with_fallback_t\fP & \fBoperator=\fP (const \fBhb_iter_with_fallback_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_with_fallback_t\fP & \fBoperator=\fP (\fBhb_iter_with_fallback_t\fP &&o HB_UNUSED)=default"
.br
.in -1c

Protected Member Functions inherited from \fBhb_iter_t< iter_t, Item >\fP
.in +1c
.ti -1c
.RI "\fBhb_iter_t\fP (const \fBhb_iter_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_t\fP (\fBhb_iter_t\fP &&o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_t\fP & \fBoperator=\fP (const \fBhb_iter_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_t\fP & \fBoperator=\fP (\fBhb_iter_t\fP &&o HB_UNUSED)=default"
.br
.in -1c

Protected Member Functions inherited from \fBhb_iter_fallback_mixin_t< iter_t, item_t >\fP
.in +1c
.ti -1c
.RI "\fBhb_iter_fallback_mixin_t\fP (const \fBhb_iter_fallback_mixin_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_fallback_mixin_t\fP (\fBhb_iter_fallback_mixin_t\fP &&o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_fallback_mixin_t\fP & \fBoperator=\fP (const \fBhb_iter_fallback_mixin_t\fP &o HB_UNUSED)=default"
.br
.ti -1c
.RI "\fBhb_iter_fallback_mixin_t\fP & \fBoperator=\fP (\fBhb_iter_fallback_mixin_t\fP &&o HB_UNUSED)=default"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
