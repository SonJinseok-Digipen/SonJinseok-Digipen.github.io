.TH "basic_format_context< OutputIt, Char >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_format_context< OutputIt, Char >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = OutputIt"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_format_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_format_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBformatter\fP< T, \fBchar_type\fP >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = OutputIt"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_format_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_format_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBformatter\fP< T, \fBchar_type\fP >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = OutputIt"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_format_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_format_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBformatter\fP< T, \fBchar_type\fP >"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = OutputIt"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBbasic_format_context\fP >"
.br
.ti -1c
.RI "using \fBparse_context_type\fP = \fBbasic_format_parse_context\fP< Char >"
.br
.ti -1c
.RI "template<typename T > using \fBformatter_type\fP = \fBformatter\fP< T, \fBchar_type\fP >"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_format_context\fP (\fBbasic_format_context\fP &&)=default"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fBbasic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP > ctx_args, detail::locale_ref loc=detail::locale_ref())"
.br
.ti -1c
.RI "constexpr auto \fBarg\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg_id\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> int"
.br
.ti -1c
.RI "auto \fBargs\fP () const \-> const \fBbasic_format_args\fP< \fBbasic_format_context\fP > &"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBerror_handler\fP () \-> detail::error_handler"
.br
.ti -1c
.RI "void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBout\fP () \-> iterator"
.br
.ti -1c
.RI "void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBlocale\fP () \-> detail::locale_ref"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (\fBbasic_format_context\fP &&)=default"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fBbasic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP > ctx_args, detail::locale_ref loc=detail::locale_ref())"
.br
.ti -1c
.RI "constexpr auto \fBarg\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg_id\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> int"
.br
.ti -1c
.RI "auto \fBargs\fP () const \-> const \fBbasic_format_args\fP< \fBbasic_format_context\fP > &"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBerror_handler\fP () \-> detail::error_handler"
.br
.ti -1c
.RI "void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBout\fP () \-> iterator"
.br
.ti -1c
.RI "void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBlocale\fP () \-> detail::locale_ref"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (\fBbasic_format_context\fP &&)=default"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fBbasic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP > ctx_args, detail::locale_ref loc=detail::locale_ref())"
.br
.ti -1c
.RI "constexpr auto \fBarg\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg_id\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> int"
.br
.ti -1c
.RI "auto \fBargs\fP () const \-> const \fBbasic_format_args\fP< \fBbasic_format_context\fP > &"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBerror_handler\fP () \-> detail::error_handler"
.br
.ti -1c
.RI "void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBout\fP () \-> iterator"
.br
.ti -1c
.RI "void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBlocale\fP () \-> detail::locale_ref"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (\fBbasic_format_context\fP &&)=default"
.br
.ti -1c
.RI "\fBbasic_format_context\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbasic_format_context\fP &)=delete"
.br
.ti -1c
.RI "constexpr \fBbasic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP > ctx_args, detail::locale_ref loc=detail::locale_ref())"
.br
.ti -1c
.RI "constexpr auto \fBarg\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBarg_id\fP (\fBbasic_string_view\fP< \fBchar_type\fP > name) \-> int"
.br
.ti -1c
.RI "auto \fBargs\fP () const \-> const \fBbasic_format_args\fP< \fBbasic_format_context\fP > &"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBerror_handler\fP () \-> detail::error_handler"
.br
.ti -1c
.RI "void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBout\fP () \-> iterator"
.br
.ti -1c
.RI "void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBlocale\fP () \-> detail::locale_ref"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename OutputIt , typename Char > using \fBbasic_format_context\fP< OutputIt, Char >::char_type =  Char"
The character type for the output\&. 
.SS "template<typename OutputIt , typename Char > using \fBbasic_format_context\fP< OutputIt, Char >::char_type =  Char"
The character type for the output\&. 
.SS "template<typename OutputIt , typename Char > using \fBbasic_format_context\fP< OutputIt, Char >::char_type =  Char"
The character type for the output\&. 
.SS "template<typename OutputIt , typename Char > using \fBbasic_format_context\fP< OutputIt, Char >::char_type =  Char"
The character type for the output\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename OutputIt , typename Char > constexpr \fBbasic_format_context\fP< OutputIt, Char >\fB::basic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP< OutputIt, Char > > ctx_args, detail::locale_ref loc = \fCdetail::locale_ref()\fP)\fC [inline]\fP, \fC [constexpr]\fP"
Constructs a \fC\fBbasic_format_context\fP\fP object\&. References to the arguments are stored in the object so make sure they have appropriate lifetimes\&. 
.SS "template<typename OutputIt , typename Char > constexpr \fBbasic_format_context\fP< OutputIt, Char >\fB::basic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP< OutputIt, Char > > ctx_args, detail::locale_ref loc = \fCdetail::locale_ref()\fP)\fC [inline]\fP, \fC [constexpr]\fP"
Constructs a \fC\fBbasic_format_context\fP\fP object\&. References to the arguments are stored in the object so make sure they have appropriate lifetimes\&. 
.SS "template<typename OutputIt , typename Char > constexpr \fBbasic_format_context\fP< OutputIt, Char >\fB::basic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP< OutputIt, Char > > ctx_args, detail::locale_ref loc = \fCdetail::locale_ref()\fP)\fC [inline]\fP, \fC [constexpr]\fP"
Constructs a \fC\fBbasic_format_context\fP\fP object\&. References to the arguments are stored in the object so make sure they have appropriate lifetimes\&. 
.SS "template<typename OutputIt , typename Char > constexpr \fBbasic_format_context\fP< OutputIt, Char >\fB::basic_format_context\fP (OutputIt out, \fBbasic_format_args\fP< \fBbasic_format_context\fP< OutputIt, Char > > ctx_args, detail::locale_ref loc = \fCdetail::locale_ref()\fP)\fC [inline]\fP, \fC [constexpr]\fP"
Constructs a \fC\fBbasic_format_context\fP\fP object\&. References to the arguments are stored in the object so make sure they have appropriate lifetimes\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
