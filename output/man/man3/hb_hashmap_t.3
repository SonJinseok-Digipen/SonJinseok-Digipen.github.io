.TH "hb_hashmap_t< K, V, k_invalid_t, v_invalid_t, kINVALID, vINVALID >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hb_hashmap_t< K, V, k_invalid_t, v_invalid_t, kINVALID, vINVALID >
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBitem_t\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef V \fBvalue_t\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBhb_hashmap_t\fP (const \fBhb_hashmap_t\fP &o)"
.br
.ti -1c
.RI "\fBhb_hashmap_t\fP (\fBhb_hashmap_t\fP &&o)"
.br
.ti -1c
.RI "\fBhb_hashmap_t\fP & \fBoperator=\fP (const \fBhb_hashmap_t\fP &o)"
.br
.ti -1c
.RI "\fBhb_hashmap_t\fP & \fBoperator=\fP (\fBhb_hashmap_t\fP &&o)"
.br
.ti -1c
.RI "\fBhb_hashmap_t\fP (std::initializer_list< \fBhb_pair_t\fP< K, V > > lst)"
.br
.ti -1c
.RI "template<typename Iterable , hb_requires(\fBhb_is_iterable\fP(Iterable)) > \fBhb_hashmap_t\fP (const Iterable &o)"
.br
.ti -1c
.RI "void \fBinit_shallow\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP ()"
.br
.ti -1c
.RI "void \fBfini_shallow\fP ()"
.br
.ti -1c
.RI "void \fBfini\fP ()"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "bool \fBin_error\fP () const"
.br
.ti -1c
.RI "bool \fBresize\fP ()"
.br
.ti -1c
.RI "bool \fBset\fP (K key, const V &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBset\fP (K key, V &&\fBvalue\fP)"
.br
.ti -1c
.RI "V \fBget\fP (K key) const"
.br
.ti -1c
.RI "void \fBdel\fP (K key)"
.br
.ti -1c
.RI "value_t \fBoperator[]\fP (K k) const"
.br
.ti -1c
.RI "bool \fBhas\fP (K k, V *vp=nullptr) const"
.br
.ti -1c
.RI "V \fBoperator()\fP (K k) const"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "bool \fBis_empty\fP () const"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "unsigned int \fBget_population\fP () const"
.br
.ti -1c
.RI "auto \fBiter\fP () const HB_AUTO_RETURN(+hb_array(items"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBhb_object_header_t\fP \fBheader\fP"
.br
.ti -1c
.RI "bool \fBsuccessful\fP"
.br
.ti -1c
.RI "unsigned int \fBpopulation\fP"
.br
.ti -1c
.RI "unsigned int \fBoccupancy\fP"
.br
.ti -1c
.RI "unsigned int \fBmask\fP"
.br
.ti -1c
.RI "unsigned int \fBprime\fP"
.br
.ti -1c
.RI "\fBitem_t\fP * \fBitems\fP"
.br
.ti -1c
.RI "auto mask \fBmask\fP: 0) | hb_filter (&item_t::is_real) | hb_map (&item_t::get_pair) ) auto keys () const HB_AUTO_RETURN ( + hb_array (items"
.br
.ti -1c
.RI "auto mask mask \fBmask\fP: 0) | hb_filter (&item_t::is_real) | hb_map (&item_t::key) | hb_map (hb_ridentity) ) auto values () const HB_AUTO_RETURN ( + hb_array (items"
.br
.ti -1c
.RI "auto mask mask mask \fBmask\fP: 0) | hb_filter (&item_t::is_real) | hb_map (&item_t::value) | hb_map (hb_ridentity) ) \fBhb_hashmap_t\fP& operator << (const \fBhb_pair_t\fP<K"
.br
.ti -1c
.RI "auto mask mask mask V & \fBv\fP { set (v\&.first, v\&.second)"
.br
.ti -1c
.RI "return * \fBthis\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "template<typename VV > bool \fBset_with_hash\fP (K key, uint32_t hash, VV &&\fBvalue\fP)"
.br
.ti -1c
.RI "unsigned int \fBbucket_for\fP (K key) const"
.br
.ti -1c
.RI "unsigned int \fBbucket_for_hash\fP (K key, uint32_t hash) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static unsigned int \fBprime_for\fP (unsigned int shift)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "void \fBswap\fP (\fBhb_hashmap_t\fP &\fBa\fP, \fBhb_hashmap_t\fP &b)"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
