.TH "formatter< T, Char, enable_if_t< detail::type_constant< T, Char >::value !=detail::type::custom_type > >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
formatter< T, Char, enable_if_t< detail::type_constant< T, Char >::value !=detail::type::custom_type > >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename ParseContext > FMT_CONSTEXPR auto \fBparse\fP (ParseContext &ctx) \-> decltype(ctx\&.begin())"
.br
.ti -1c
.RI "template<detail::type U = detail::type_constant<T, Char>::value, enable_if_t<(U==detail::type::string_type||U==detail::type::cstring_type||U==detail::type::char_type), int >  = 0> FMT_CONSTEXPR void \fBset_debug_format\fP ()"
.br
.ti -1c
.RI "template<typename FormatContext > FMT_CONSTEXPR auto \fBformat\fP (const T &val, FormatContext &ctx) const \-> decltype(ctx\&.out())"
.br
.ti -1c
.RI "template<typename ParseContext > FMT_CONSTEXPR auto \fBparse\fP (ParseContext &ctx) \-> decltype(ctx\&.begin())"
.br
.ti -1c
.RI "template<detail::type U = detail::type_constant<T, Char>::value, enable_if_t<(U==detail::type::string_type||U==detail::type::cstring_type||U==detail::type::char_type), int >  = 0> FMT_CONSTEXPR void \fBset_debug_format\fP ()"
.br
.ti -1c
.RI "template<typename FormatContext > FMT_CONSTEXPR auto \fBformat\fP (const T &val, FormatContext &ctx) const \-> decltype(ctx\&.out())"
.br
.ti -1c
.RI "template<typename ParseContext > FMT_CONSTEXPR auto \fBparse\fP (ParseContext &ctx) \-> decltype(ctx\&.begin())"
.br
.ti -1c
.RI "template<detail::type U = detail::type_constant<T, Char>::value, enable_if_t<(U==detail::type::string_type||U==detail::type::cstring_type||U==detail::type::char_type), int >  = 0> FMT_CONSTEXPR void \fBset_debug_format\fP ()"
.br
.ti -1c
.RI "template<typename FormatContext > FMT_CONSTEXPR auto \fBformat\fP (const T &val, FormatContext &ctx) const \-> decltype(ctx\&.out())"
.br
.ti -1c
.RI "template<typename ParseContext > FMT_CONSTEXPR auto \fBparse\fP (ParseContext &ctx) \-> decltype(ctx\&.begin())"
.br
.ti -1c
.RI "template<detail::type U = detail::type_constant<T, Char>::value, enable_if_t<(U==detail::type::string_type||U==detail::type::cstring_type||U==detail::type::char_type), int >  = 0> FMT_CONSTEXPR void \fBset_debug_format\fP ()"
.br
.ti -1c
.RI "template<typename FormatContext > FMT_CONSTEXPR auto \fBformat\fP (const T &val, FormatContext &ctx) const \-> decltype(ctx\&.out())"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
