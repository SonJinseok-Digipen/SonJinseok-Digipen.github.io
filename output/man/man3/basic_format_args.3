.TH "basic_format_args< Context >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_format_args< Context >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <core\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBsize_type\fP = int"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBContext\fP >"
.br
.ti -1c
.RI "using \fBsize_type\fP = int"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBContext\fP >"
.br
.ti -1c
.RI "using \fBsize_type\fP = int"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBContext\fP >"
.br
.ti -1c
.RI "using \fBsize_type\fP = int"
.br
.ti -1c
.RI "using \fBformat_arg\fP = \fBbasic_format_arg\fP< \fBContext\fP >"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > &store)"
.br
.ti -1c
.RI "constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > &store)"
.br
.ti -1c
.RI "constexpr \fBbasic_format_args\fP (const \fBformat_arg\fP *args, int count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBget\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget\fP (\fBbasic_string_view\fP< Char > name) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget_id\fP (\fBbasic_string_view\fP< Char > name) const \-> int"
.br
.ti -1c
.RI "auto \fBmax_size\fP () const \-> int"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > &store)"
.br
.ti -1c
.RI "constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > &store)"
.br
.ti -1c
.RI "constexpr \fBbasic_format_args\fP (const \fBformat_arg\fP *args, int count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBget\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget\fP (\fBbasic_string_view\fP< Char > name) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget_id\fP (\fBbasic_string_view\fP< Char > name) const \-> int"
.br
.ti -1c
.RI "auto \fBmax_size\fP () const \-> int"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > &store)"
.br
.ti -1c
.RI "constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > &store)"
.br
.ti -1c
.RI "constexpr \fBbasic_format_args\fP (const \fBformat_arg\fP *args, int count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBget\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget\fP (\fBbasic_string_view\fP< Char > name) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget_id\fP (\fBbasic_string_view\fP< Char > name) const \-> int"
.br
.ti -1c
.RI "auto \fBmax_size\fP () const \-> int"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > &store)"
.br
.ti -1c
.RI "constexpr FMT_INLINE \fBbasic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > &store)"
.br
.ti -1c
.RI "constexpr \fBbasic_format_args\fP (const \fBformat_arg\fP *args, int count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBget\fP (int id) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget\fP (\fBbasic_string_view\fP< Char > name) const \-> \fBformat_arg\fP"
.br
.ti -1c
.RI "template<typename Char > auto \fBget_id\fP (\fBbasic_string_view\fP< Char > name) const \-> int"
.br
.ti -1c
.RI "auto \fBmax_size\fP () const \-> int"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename \fBContext\fP>
.br
class basic_format_args< Context >"\\rst \fBA\fP view of a collection of formatting arguments\&. To avoid lifetime issues it should only be used as a parameter type in type-erased functions such as \fCvformat\fP::
.PP
void vlog(string_view format_str, format_args args); // OK format_args args = make_format_args(42); // Error: dangling reference \\endrst 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename \fBContext\fP > template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBformat_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBdynamic_format_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg\fP * args, int count)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from a dynamic set of arguments\&. \\endrst 
.SS "template<typename \fBContext\fP > template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBformat_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBdynamic_format_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg\fP * args, int count)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from a dynamic set of arguments\&. \\endrst 
.SS "template<typename \fBContext\fP > template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBformat_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBdynamic_format_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg\fP * args, int count)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from a dynamic set of arguments\&. \\endrst 
.SS "template<typename \fBContext\fP > template<typename\&.\&.\&. Args> constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg_store\fP< \fBContext\fP, Args\&.\&.\&. > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBformat_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr FMT_INLINE \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBdynamic_format_arg_store\fP< \fBContext\fP > & store)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from \fC~fmt\fBdynamic_format_arg_store\fP\fP\&. \\endrst 
.SS "template<typename \fBContext\fP > constexpr \fBbasic_format_args\fP< \fBContext\fP >\fB::basic_format_args\fP (const \fBformat_arg\fP * args, int count)\fC [inline]\fP, \fC [constexpr]\fP"
\\rst Constructs a \fC\fBbasic_format_args\fP\fP object from a dynamic set of arguments\&. \\endrst 
.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBContext\fP > FMT_CONSTEXPR auto \fBbasic_format_args\fP< \fBContext\fP >::get (int id) const \-> \fBformat_arg\fP \fC [inline]\fP"
Returns the argument with the specified id\&. 
.SS "template<typename \fBContext\fP > FMT_CONSTEXPR auto \fBbasic_format_args\fP< \fBContext\fP >::get (int id) const \-> \fBformat_arg\fP \fC [inline]\fP"
Returns the argument with the specified id\&. 
.SS "template<typename \fBContext\fP > FMT_CONSTEXPR auto \fBbasic_format_args\fP< \fBContext\fP >::get (int id) const \-> \fBformat_arg\fP \fC [inline]\fP"
Returns the argument with the specified id\&. 
.SS "template<typename \fBContext\fP > FMT_CONSTEXPR auto \fBbasic_format_args\fP< \fBContext\fP >::get (int id) const \-> \fBformat_arg\fP \fC [inline]\fP"
Returns the argument with the specified id\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
