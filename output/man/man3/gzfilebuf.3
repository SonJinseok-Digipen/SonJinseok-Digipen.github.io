.TH "gzfilebuf" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gzfilebuf \- Gzipped file stream buffer class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <zfstream\&.h>\fP
.PP
Inherits streambuf, and std::streambuf\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBgzfilebuf\fP * \fBopen\fP (const char *name, int io_mode)"
.br
.ti -1c
.RI "\fBgzfilebuf\fP * \fBattach\fP (int file_descriptor, int io_mode)"
.br
.ti -1c
.RI "\fBgzfilebuf\fP * \fBclose\fP ()"
.br
.ti -1c
.RI "int \fBsetcompressionlevel\fP (int comp_level)"
.br
.ti -1c
.RI "int \fBsetcompressionstrategy\fP (int comp_strategy)"
.br
.ti -1c
.RI "int \fBis_open\fP () const"
.br
.ti -1c
.RI "virtual streampos \fBseekoff\fP (streamoff, ios::seek_dir, int)"
.br
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.ti -1c
.RI "int \fBsetcompression\fP (int comp_level, int comp_strategy=Z_DEFAULT_STRATEGY)"
.br
.RI "Set compression level and strategy on the fly\&. "
.ti -1c
.RI "bool \fBis_open\fP () const"
.br
.RI "Check if file is open\&. "
.ti -1c
.RI "\fBgzfilebuf\fP * \fBopen\fP (const char *name, std::ios_base::openmode mode)"
.br
.RI "Open gzipped file\&. "
.ti -1c
.RI "\fBgzfilebuf\fP * \fBattach\fP (int fd, std::ios_base::openmode mode)"
.br
.RI "Attach to already open gzipped file\&. "
.ti -1c
.RI "\fBgzfilebuf\fP * \fBclose\fP ()"
.br
.RI "Close gzipped file\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual int \fBunderflow\fP ()"
.br
.ti -1c
.RI "virtual int \fBoverflow\fP (int=EOF)"
.br
.ti -1c
.RI "bool \fBopen_mode\fP (std::ios_base::openmode mode, char *c_mode) const"
.br
.RI "Convert ios open mode int to mode string used by zlib\&. "
.ti -1c
.RI "virtual std::streamsize \fBshowmanyc\fP ()"
.br
.RI "Number of characters available in stream buffer\&. "
.ti -1c
.RI "virtual int_type \fBunderflow\fP ()"
.br
.RI "Fill get area from gzipped file\&. "
.ti -1c
.RI "virtual int_type \fBoverflow\fP (int_type c=traits_type::eof())"
.br
.RI "Write put area to gzipped file\&. "
.ti -1c
.RI "virtual std::streambuf * \fBsetbuf\fP (char_type *p, std::streamsize n)"
.br
.RI "Installs external stream buffer\&. "
.ti -1c
.RI "virtual int \fBsync\fP ()"
.br
.RI "Flush stream buffer to file\&. "
.in -1c
.SH "Detailed Description"
.PP 
Gzipped file stream buffer class\&. 

This class implements basic_filebuf for gzipped files\&. It doesn't yet support seeking (allowed by zlib but slow/limited), putback and read/write access (tricky)\&. Otherwise, it attempts to be a drop-in replacement for the standard file streambuf\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBgzfilebuf\fP * gzfilebuf::attach (int fd, std::ios_base::openmode mode)"

.PP
Attach to already open gzipped file\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP File descriptor\&. 
.br
\fImode\fP Open mode flags\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCthis\fP on success, NULL on failure\&. 
.RE
.PP

.SS "\fBgzfilebuf\fP * gzfilebuf::close ()"

.PP
Close gzipped file\&. 
.PP
\fBReturns\fP
.RS 4
\fCthis\fP on success, NULL on failure\&. 
.RE
.PP

.SS "bool gzfilebuf::is_open () const\fC [inline]\fP"

.PP
Check if file is open\&. 
.PP
\fBReturns\fP
.RS 4
True if file is open\&. 
.RE
.PP

.SS "\fBgzfilebuf\fP * gzfilebuf::open (const char * name, std::ios_base::openmode mode)"

.PP
Open gzipped file\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP File name\&. 
.br
\fImode\fP Open mode flags\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCthis\fP on success, NULL on failure\&. 
.RE
.PP

.SS "bool gzfilebuf::open_mode (std::ios_base::openmode mode, char * c_mode) const\fC [protected]\fP"

.PP
Convert ios open mode int to mode string used by zlib\&. 
.PP
\fBReturns\fP
.RS 4
True if valid mode flag combination\&. 
.RE
.PP

.SS "gzfilebuf::int_type gzfilebuf::overflow (int_type c = \fCtraits_type::eof()\fP)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Write put area to gzipped file\&. 
.PP
\fBParameters\fP
.RS 4
\fIc\fP Extra character to add to buffer contents\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Non-EOF on success, EOF on error\&.
.RE
.PP
This actually writes characters in stream buffer to gzipped file\&. With unbuffered output this is done one character at a time\&. 
.SS "std::streambuf * gzfilebuf::setbuf (char_type * p, std::streamsize n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Installs external stream buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIp\fP Pointer to char buffer\&. 
.br
\fIn\fP Size of external buffer\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fCthis\fP on success, NULL on failure\&.
.RE
.PP
Call setbuf(0,0) to enable unbuffered output\&. 
.SS "int gzfilebuf::setcompression (int comp_level, int comp_strategy = \fCZ_DEFAULT_STRATEGY\fP)"

.PP
Set compression level and strategy on the fly\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomp_level\fP Compression level (see zlib\&.h for allowed values) 
.br
\fIcomp_strategy\fP Compression strategy (see zlib\&.h for allowed values) 
.RE
.PP
\fBReturns\fP
.RS 4
Z_OK on success, Z_STREAM_ERROR otherwise\&.
.RE
.PP
Unfortunately, these parameters cannot be modified separately, as the previous zfstream version assumed\&. Since the strategy is seldom changed, it can default and setcompression(level) then becomes like the old setcompressionlevel(level)\&. 
.SS "std::streamsize gzfilebuf::showmanyc ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Number of characters available in stream buffer\&. 
.PP
\fBReturns\fP
.RS 4
Number of characters\&.
.RE
.PP
This indicates number of characters in get area of stream buffer\&. These characters can be read without accessing the gzipped file\&. 
.SS "virtual int gzfilebuf::sync ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Flush stream buffer to file\&. 
.PP
\fBReturns\fP
.RS 4
0 on success, -1 on error\&.
.RE
.PP
This calls underflow(EOF) to do the job\&. 
.SS "virtual int_type gzfilebuf::underflow ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Fill get area from gzipped file\&. 
.PP
\fBReturns\fP
.RS 4
First character in get area on success, EOF on error\&.
.RE
.PP
This actually reads characters from gzipped file to stream buffer\&. Always buffered\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
