.TH "md__ase_sprite_aseprite_third_party_curl_docs__h_t_t_p2" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_third_party_curl_docs__h_t_t_p2 \- HTTP/2 with curl 
.PP
\fCHTTP/2 Spec\fP \fChttp2 explained\fP
.SH "Build prerequisites"
.PP
.IP "\(bu" 2
nghttp2
.IP "\(bu" 2
OpenSSL, libressl, BoringSSL, NSS, GnuTLS, mbedTLS, wolfSSL or Schannel with a new enough version\&.
.PP
.SH "<a href='https://nghttp2\&.org/' >nghttp2</a>"
.PP
libcurl uses this 3rd party library for the low level protocol handling parts\&. The reason for this is that HTTP/2 is much more complex at that layer than HTTP/1\&.1 (which we implement on our own) and that nghttp2 is an already existing and well functional library\&.
.PP
We require at least version 1\&.12\&.0\&.
.SH "Over an http:// URL"
.PP
If \fCCURLOPT_HTTP_VERSION\fP is set to \fCCURL_HTTP_VERSION_2_0\fP, libcurl will include an upgrade header in the initial request to the host to allow upgrading to HTTP/2\&.
.PP
Possibly we can later introduce an option that will cause libcurl to fail if not possible to upgrade\&. Possibly we introduce an option that makes libcurl use HTTP/2 at once over http://
.SH "Over an https:// URL"
.PP
If \fCCURLOPT_HTTP_VERSION\fP is set to \fCCURL_HTTP_VERSION_2_0\fP, libcurl will use ALPN (or NPN) to negotiate which protocol to continue with\&. Possibly introduce an option that will cause libcurl to fail if not possible to use HTTP/2\&.
.PP
\fCCURL_HTTP_VERSION_2TLS\fP was added in 7\&.47\&.0 as a way to ask libcurl to prefer HTTP/2 for HTTPS but stick to 1\&.1 by default for plain old \fBHTTP\fP connections\&.
.PP
ALPN is the TLS extension that HTTP/2 is expected to use\&. The NPN extension is for a similar purpose, was made prior to ALPN and is used for SPDY so early HTTP/2 servers are implemented using NPN before ALPN support is widespread\&.
.PP
\fCCURLOPT_SSL_ENABLE_ALPN\fP and \fCCURLOPT_SSL_ENABLE_NPN\fP are offered to allow applications to explicitly disable ALPN or NPN\&.
.SH "SSL libs"
.PP
The challenge is the ALPN and NPN support and all our different SSL backends\&. You may need a fairly updated SSL library version for it to provide the necessary TLS features\&. Right now we support:
.PP
.IP "\(bu" 2
OpenSSL: ALPN and NPN
.IP "\(bu" 2
libressl: ALPN and NPN
.IP "\(bu" 2
BoringSSL: ALPN and NPN
.IP "\(bu" 2
NSS: ALPN and NPN
.IP "\(bu" 2
GnuTLS: ALPN
.IP "\(bu" 2
mbedTLS: ALPN
.IP "\(bu" 2
Schannel: ALPN
.IP "\(bu" 2
wolfSSL: ALPN
.IP "\(bu" 2
Secure Transport: ALPN
.PP
.SH "Multiplexing"
.PP
Starting in 7\&.43\&.0, libcurl fully supports HTTP/2 multiplexing, which is the term for doing multiple independent transfers over the same physical TCP connection\&.
.PP
To take advantage of multiplexing, you need to use the multi interface and set \fCCURLMOPT_PIPELINING\fP to \fCCURLPIPE_MULTIPLEX\fP\&. With that bit set, libcurl will attempt to re-use existing HTTP/2 connections and just add a new stream over that when doing subsequent parallel requests\&.
.PP
While libcurl sets up a connection to a \fBHTTP\fP server there is a period during which it doesn't know if it can pipeline or do multiplexing and if you add new transfers in that period, libcurl will default to start new connections for those transfers\&. With the new option \fCCURLOPT_PIPEWAIT\fP (added in 7\&.43\&.0), you can ask that a transfer should rather wait and see in case there's a connection for the same host in progress that might end up being possible to multiplex on\&. It favours keeping the number of connections low to the cost of slightly longer time to first byte transferred\&.
.SH "Applications"
.PP
We hide HTTP/2's binary nature and convert received HTTP/2 traffic to headers in \fBHTTP\fP 1\&.1 style\&. This allows applications to work unmodified\&.
.SH "curl tool"
.PP
curl offers the \fC--http2\fP command line option to enable use of HTTP/2\&.
.PP
curl offers the \fC--http2-prior-knowledge\fP command line option to enable use of HTTP/2 without HTTP/1\&.1 Upgrade\&.
.PP
Since 7\&.47\&.0, the curl tool enables HTTP/2 by default for HTTPS connections\&.
.SH "curl tool limitations"
.PP
The command line tool doesn't support HTTP/2 server push\&. It supports multiplexing when the parallel transfer option is used\&.
.SH "HTTP Alternative Services"
.PP
Alt-Svc is an extension with a corresponding frame (ALTSVC) in HTTP/2 that tells the client about an alternative 'route' to the same content for the same origin server that you get the response from\&. \fBA\fP browser or long-living client can use that hint to create a new connection asynchronously\&. For libcurl, we may introduce a way to bring such clues to the application and/or let a subsequent request use the alternate route automatically\&.
.PP
\fCDetailed in RFC 7838\fP 
