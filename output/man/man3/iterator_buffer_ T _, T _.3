.TH "iterator_buffer< T *, T >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iterator_buffer< T *, T >
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBbuffer< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBiterator_buffer\fP (T *out, size_t=0)"
.br
.ti -1c
.RI "auto \fBout\fP () \-> T *"
.br
.ti -1c
.RI "\fBiterator_buffer\fP (T *out, size_t=0)"
.br
.ti -1c
.RI "auto \fBout\fP () \-> T *"
.br
.ti -1c
.RI "\fBiterator_buffer\fP (T *out, size_t=0)"
.br
.ti -1c
.RI "auto \fBout\fP () \-> T *"
.br
.ti -1c
.RI "\fBiterator_buffer\fP (T *out, size_t=0)"
.br
.ti -1c
.RI "auto \fBout\fP () \-> T *"
.br
.in -1c

Public Member Functions inherited from \fBbuffer< T >\fP
.in +1c
.ti -1c
.RI "\fBbuffer\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "FMT_INLINE auto \fBbegin\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_INLINE auto \fBend\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_INLINE auto \fBbegin\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "FMT_INLINE auto \fBend\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBcapacity\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_resize\fP (size_t count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_reserve\fP (size_t new_capacity)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBpush_back\fP (const T &\fBvalue\fP)"
.br
.ti -1c
.RI "template<typename U > void \fBappend\fP (const U *begin, const U *end)"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) \-> T &"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) const \-> const T &"
.br
.ti -1c
.RI "\fBbuffer\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "auto \fBbegin\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBend\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBbegin\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "auto \fBend\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBcapacity\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_resize\fP (size_t count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_reserve\fP (size_t new_capacity)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBpush_back\fP (const T &\fBvalue\fP)"
.br
.ti -1c
.RI "template<typename U > void \fBappend\fP (const U *begin, const U *end)"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) \-> T &"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) const \-> const T &"
.br
.ti -1c
.RI "\fBbuffer\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "auto \fBbegin\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBend\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBbegin\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "auto \fBend\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBcapacity\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_resize\fP (size_t count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_reserve\fP (size_t new_capacity)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBpush_back\fP (const T &\fBvalue\fP)"
.br
.ti -1c
.RI "template<typename U > void \fBappend\fP (const U *begin, const U *end)"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) \-> T &"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) const \-> const T &"
.br
.ti -1c
.RI "\fBbuffer\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBbuffer\fP &)=delete"
.br
.ti -1c
.RI "auto \fBbegin\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBend\fP () noexcept \-> T *"
.br
.ti -1c
.RI "auto \fBbegin\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "auto \fBend\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "constexpr auto \fBsize\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "constexpr auto \fBcapacity\fP () const noexcept \-> size_t"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () noexcept \-> T *"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBdata\fP () const noexcept \-> const T *"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_resize\fP (size_t count)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBtry_reserve\fP (size_t new_capacity)"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBpush_back\fP (const T &\fBvalue\fP)"
.br
.ti -1c
.RI "template<typename U > void \fBappend\fP (const U *begin, const U *end)"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) \-> T &"
.br
.ti -1c
.RI "template<typename Idx > FMT_CONSTEXPR auto \fBoperator[]\fP (Idx index) const \-> const T &"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBgrow\fP (size_t) override"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBgrow\fP (size_t) override"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBgrow\fP (size_t) override"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 void \fBgrow\fP (size_t) override"
.br
.in -1c

Protected Member Functions inherited from \fBbuffer< T >\fP
.in +1c
.ti -1c
.RI "\fBbuffer\fP (size_t sz) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 \fBbuffer\fP (T *p=nullptr, size_t sz=0, size_t cap=0) noexcept"
.br
.ti -1c
.RI "\fBbuffer\fP (\fBbuffer\fP &&)=default"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBset\fP (T *buf_data, size_t buf_capacity) noexcept"
.br
.ti -1c
.RI "virtual FMT_CONSTEXPR20 void \fBgrow\fP (size_t \fBcapacity\fP)=0"
.br
.ti -1c
.RI "\fBbuffer\fP (size_t sz) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 \fBbuffer\fP (T *p=nullptr, size_t sz=0, size_t cap=0) noexcept"
.br
.ti -1c
.RI "\fBbuffer\fP (\fBbuffer\fP &&)=default"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBset\fP (T *buf_data, size_t buf_capacity) noexcept"
.br
.ti -1c
.RI "virtual FMT_CONSTEXPR20 void \fBgrow\fP (size_t \fBcapacity\fP)=0"
.br
.ti -1c
.RI "\fBbuffer\fP (size_t sz) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 \fBbuffer\fP (T *p=nullptr, size_t sz=0, size_t cap=0) noexcept"
.br
.ti -1c
.RI "\fBbuffer\fP (\fBbuffer\fP &&)=default"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBset\fP (T *buf_data, size_t buf_capacity) noexcept"
.br
.ti -1c
.RI "virtual FMT_CONSTEXPR20 void \fBgrow\fP (size_t \fBcapacity\fP)=0"
.br
.ti -1c
.RI "\fBbuffer\fP (size_t sz) noexcept"
.br
.ti -1c
.RI "FMT_CONSTEXPR20 \fBbuffer\fP (T *p=nullptr, size_t sz=0, size_t cap=0) noexcept"
.br
.ti -1c
.RI "\fBbuffer\fP (\fBbuffer\fP &&)=default"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBset\fP (T *buf_data, size_t buf_capacity) noexcept"
.br
.ti -1c
.RI "virtual FMT_CONSTEXPR20 void \fBgrow\fP (size_t \fBcapacity\fP)=0"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBbuffer< T >\fP
.in +1c
.ti -1c
.RI "using \fBvalue_type\fP = T"
.br
.ti -1c
.RI "using \fBconst_reference\fP = const T &"
.br
.ti -1c
.RI "using \fBvalue_type\fP = T"
.br
.ti -1c
.RI "using \fBconst_reference\fP = const T &"
.br
.ti -1c
.RI "using \fBvalue_type\fP = T"
.br
.ti -1c
.RI "using \fBconst_reference\fP = const T &"
.br
.ti -1c
.RI "using \fBvalue_type\fP = T"
.br
.ti -1c
.RI "using \fBconst_reference\fP = const T &"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > FMT_CONSTEXPR20 void \fBiterator_buffer\fP< T *, T >::grow (size_t capacity)\fC [inline]\fP, \fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Increases the buffer capacity to hold at least \fIcapacity\fP elements\&. 
.PP
Implements \fBbuffer< T >\fP\&.
.SS "template<typename T > FMT_CONSTEXPR20 void \fBiterator_buffer\fP< T *, T >::grow (size_t capacity)\fC [inline]\fP, \fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Increases the buffer capacity to hold at least \fIcapacity\fP elements\&. 
.PP
Implements \fBbuffer< T >\fP\&.
.SS "template<typename T > FMT_CONSTEXPR20 void \fBiterator_buffer\fP< T *, T >::grow (size_t capacity)\fC [inline]\fP, \fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Increases the buffer capacity to hold at least \fIcapacity\fP elements\&. 
.PP
Implements \fBbuffer< T >\fP\&.
.SS "template<typename T > FMT_CONSTEXPR20 void \fBiterator_buffer\fP< T *, T >::grow (size_t capacity)\fC [inline]\fP, \fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Increases the buffer capacity to hold at least \fIcapacity\fP elements\&. 
.PP
Implements \fBbuffer< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
