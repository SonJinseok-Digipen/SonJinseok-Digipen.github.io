.TH "compile_parse_context< Char, ErrorHandler >" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
compile_parse_context< Char, ErrorHandler >
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBbasic_format_parse_context< Char, ErrorHandler >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "FMT_CONSTEXPR \fBcompile_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, int num_args, const type *types, ErrorHandler eh={}, int next_arg_id=0)"
.br
.ti -1c
.RI "constexpr auto \fBnum_args\fP () const \-> int"
.br
.ti -1c
.RI "constexpr auto \fBarg_type\fP (int id) const \-> type"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR \fBcompile_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, int num_args, const type *types, ErrorHandler eh={}, int next_arg_id=0)"
.br
.ti -1c
.RI "constexpr auto \fBnum_args\fP () const \-> int"
.br
.ti -1c
.RI "constexpr auto \fBarg_type\fP (int id) const \-> type"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR \fBcompile_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, int num_args, const type *types, ErrorHandler eh={}, int next_arg_id=0)"
.br
.ti -1c
.RI "constexpr auto \fBnum_args\fP () const \-> int"
.br
.ti -1c
.RI "constexpr auto \fBarg_type\fP (int id) const \-> type"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR \fBcompile_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, int num_args, const type *types, ErrorHandler eh={}, int next_arg_id=0)"
.br
.ti -1c
.RI "constexpr auto \fBnum_args\fP () const \-> int"
.br
.ti -1c
.RI "constexpr auto \fBarg_type\fP (int id) const \-> type"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.in -1c

Public Member Functions inherited from \fBbasic_format_parse_context< Char, ErrorHandler >\fP
.in +1c
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.ti -1c
.RI "constexpr \fBbasic_format_parse_context\fP (\fBbasic_string_view\fP< Char > format_str, ErrorHandler eh={}, int \fBnext_arg_id\fP=0)"
.br
.ti -1c
.RI "constexpr auto \fBbegin\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "constexpr auto \fBend\fP () const noexcept \-> iterator"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBadvance_to\fP (iterator it)"
.br
.ti -1c
.RI "FMT_CONSTEXPR auto \fBnext_arg_id\fP () \-> int"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (int id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_arg_id\fP (\fBbasic_string_view\fP< Char >)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBcheck_dynamic_spec\fP (int arg_id)"
.br
.ti -1c
.RI "FMT_CONSTEXPR void \fBon_error\fP (const char *message)"
.br
.ti -1c
.RI "constexpr auto \fBerror_handler\fP () const \-> ErrorHandler"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBbasic_format_parse_context< Char, ErrorHandler >\fP
.in +1c
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.ti -1c
.RI "using \fBchar_type\fP = Char"
.br
.ti -1c
.RI "using \fBiterator\fP = typename \fBbasic_string_view\fP< Char >::iterator"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
