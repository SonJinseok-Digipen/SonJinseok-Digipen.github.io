.TH "md__ase_sprite_aseprite_docs_ase_file_specs" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__ase_sprite_aseprite_docs_ase_file_specs \- Aseprite File Format (\&.ase/\&.aseprite) Specifications 
.PP

.IP "1." 4
\fBReferences\fP
.IP "2." 4
\fBIntroduction\fP
.IP "3." 4
\fBHeader\fP
.IP "4." 4
\fBFrames\fP
.IP "5." 4
\fBChunk Types\fP
.IP "6." 4
\fBFile Format Changes\fP
.PP
.SH "References"
.PP
ASE files use Intel (little-endian) byte order\&.
.PP
.IP "\(bu" 2
\fCBYTE\fP: An 8-bit unsigned integer value
.IP "\(bu" 2
\fCWORD\fP: \fBA\fP 16-bit unsigned integer value
.IP "\(bu" 2
\fCSHORT\fP: \fBA\fP 16-bit signed integer value
.IP "\(bu" 2
\fCDWORD\fP: \fBA\fP 32-bit unsigned integer value
.IP "\(bu" 2
\fCLONG\fP: \fBA\fP 32-bit signed integer value
.IP "\(bu" 2
\fCFIXED\fP: \fBA\fP 32-bit fixed point (16\&.16) value
.IP "\(bu" 2
\fCFLOAT\fP: \fBA\fP 32-bit single-precision value
.IP "\(bu" 2
\fCDOUBLE\fP: \fBA\fP 64-bit double-precision value
.IP "\(bu" 2
\fCQWORD\fP: \fBA\fP 64-bit unsigned integer value
.IP "\(bu" 2
\fCLONG64\fP: \fBA\fP 64-bit signed integer value
.IP "\(bu" 2
\fCBYTE[n]\fP: 'n' bytes\&.
.IP "\(bu" 2
\fCSTRING\fP:
.IP "  \(bu" 4
\fCWORD\fP: string length (number of bytes)
.IP "  \(bu" 4
\fCBYTE[length]\fP: characters (in UTF-8) The `'\\0'\fCcharacter is not included\&. *\fPPOINT\fC: -\fPLONG\fC: X coordinate value -\fPLONG\fC: Y coordinate value *\fPSIZE\fC: -\fPLONG\fC: Width value -\fPLONG\fC: Height value *\fPRECT\fC: -\fPPOINT\fC: Origin coordinates -\fPSIZE\fC: Rectangle size *\fPPIXEL\fC: One pixel, depending on the image pixel format:\fP
.IP "  \(bu" 4
\fC**RGBA**:\fPBYTE[4]\fC, each pixel have 4 bytes in this order Red, Green, Blue, Alpha\&.\fP
.IP "  \(bu" 4
\fC**Grayscale**:\fPBYTE[2]\fC, each pixel have 2 bytes in the order \fBValue\fP, Alpha\&.\fP
.IP "  \(bu" 4
\fC**Indexed**:\fPBYTE\fC, each pixel uses 1 byte (the index)\&. *\fPTILE\fC: **Tilemaps**: Each tile can be a 8-bit (\fPBYTE\fC), 16-bit (\fPWORD\fC), or 32-bit (\fPDWORD`) value and there are masks related to the meaning of each bit\&.
.PP

.PP
.SH "Introduction"
.PP
The format is much like FLI/FLC files, but with different magic number and differents chunks\&. Also, the color depth can be 8, 16 or 32 for Indexed, Grayscale and RGB respectively, and images are compressed images with zlib\&. Color palettes are in FLI color chunks (it could be type=11 or type=4)\&. For color depths more than 8bpp, palettes are optional\&.
.PP
To read the sprite:
.PP
.IP "\(bu" 2
Read the \fBASE header\fP
.IP "\(bu" 2
For each frame do (how many frames? the ASE header has that information):
.IP "  \(bu" 4
Read the \fBframe header\fP
.IP "  \(bu" 4
For each chunk in this frame (how many chunks? the frame header has that information)
.IP "    \(bu" 6
Read the chunk (it should be layer information, a cel or a palette)
.PP

.PP

.PP
.SH "Header"
.PP
\fBA\fP 128-byte header (same as FLC/FLI header, but with other magic number): 
.PP
.nf
DWORD       File size
WORD        Magic number (0xA5E0)
WORD        Frames
WORD        Width in pixels
WORD        Height in pixels
WORD        Color depth (bits per pixel)
              32 bpp = RGBA
              16 bpp = Grayscale
              8 bpp = Indexed
DWORD       Flags:
              1 = Layer opacity has valid value
WORD        Speed (milliseconds between frame, like in FLC files)
            DEPRECATED: You should use the frame duration field
            from each frame header
DWORD       Set be 0
DWORD       Set be 0
BYTE        Palette entry (index) which represent transparent color
            in all non-background layers (only for Indexed sprites)\&.
BYTE[3]     Ignore these bytes
WORD        Number of colors (0 means 256 for old sprites)
BYTE        Pixel width (pixel ratio is 'pixel width/pixel height')\&.
            If this or pixel height field is zero, pixel ratio is 1:1
BYTE        Pixel height
SHORT       X position of the grid
SHORT       Y position of the grid
WORD        Grid width (zero if there is no grid, grid size
            is 16x16 on Aseprite by default)
WORD        Grid height (zero if there is no grid)
BYTE[84]    For future (set to zero)

.fi
.PP
 
.SH "Frames"
.PP
After the header come the 'frames' data\&. Each frame has this little header of 16 bytes: 
.PP
.nf
DWORD       Bytes in this frame
WORD        Magic number (always 0xF1FA)
WORD        Old field which specifies the number of 'chunks'
            in this frame\&. If this value is 0xFFFF, we might
            have more chunks to read in this frame
            (so we have to use the new field)
WORD        Frame duration (in milliseconds)
BYTE[2]     For future (set to zero)
DWORD       New field which specifies the number of 'chunks'
            in this frame (if this is 0, use the old field)

.fi
.PP
 Then each chunk format is: 
.PP
.nf
DWORD       Chunk size
WORD        Chunk type
BYTE[]      Chunk data

.fi
.PP
 
.SH "Chunk Types"
.PP
.SS "Old palette chunk (0x0004)"
Ignore this chunk if you find the new palette chunk (0x2019) Aseprite v1\&.1 saves both chunks 0x0004 and 0x2019 just for backward compatibility\&. 
.PP
.nf
WORD        Number of packets
+ For each packet
  BYTE      Number of palette entries to skip from the last packet (start from 0)
  BYTE      Number of colors in the packet (0 means 256)
  + For each color in the packet
    BYTE    Red (0-255)
    BYTE    Green (0-255)
    BYTE    Blue (0-255)

.fi
.PP
 
.SS "Old palette chunk (0x0011)"
Ignore this chunk if you find the new palette chunk (0x2019) 
.PP
.nf
WORD        Number of packets
+ For each packet
  BYTE      Number of palette entries to skip from the last packet (start from 0)
  BYTE      Number of colors in the packet (0 means 256)
  + For each color in the packet
    BYTE    Red (0-63)
    BYTE    Green (0-63)
    BYTE    Blue (0-63)

.fi
.PP
 
.SS "Layer Chunk (0x2004)"
In the first frame should be a set of layer chunks to determine the entire layers layout:
.PP
WORD Flags: 1 = Visible 2 = Editable 4 = Lock movement 8 = Background 16 = Prefer linked cels 32 = The layer group should be displayed collapsed 64 = The layer is a reference layer WORD Layer type 0 = Normal (image) layer 1 = Group 2 = Tilemap WORD Layer child level (see NOTE\&.1) WORD Default layer width in pixels (ignored) WORD Default layer height in pixels (ignored) WORD Blend mode (always 0 for layer set) Normal = 0 Multiply = 1 Screen = 2 Overlay = 3 Darken = 4 Lighten = 5 Color Dodge = 6 Color Burn = 7 Hard Light = 8 Soft Light = 9 Difference = 10 Exclusion = 11 Hue = 12 Saturation = 13 Color = 14 Luminosity = 15 Addition = 16 Subtract = 17 Divide = 18 BYTE Opacity Note: valid only if file header flags field has bit 1 set BYTE[3] For future (set to zero) STRING Layer name
.IP "\(bu" 2
If layer type = 2 DWORD Tileset index
.PP
.SS "Cel Chunk (0x2005)"
This chunk determine where to put a cel in the specified layer/frame\&. 
.PP
.nf
WORD        Layer index (see NOTE\&.2)
SHORT       X position
SHORT       Y position
BYTE        Opacity level
WORD        Cel Type
            0 - Raw Image Data (unused, compressed image is preferred)
            1 - Linked Cel
            2 - Compressed Image
            3 - Compressed Tilemap
BYTE[7]     For future (set to zero)
+ For cel type = 0 (Raw Image Data)
  WORD      Width in pixels
  WORD      Height in pixels
  PIXEL[]   Raw pixel data: row by row from top to bottom,
            for each scanline read pixels from left to right\&.
+ For cel type = 1 (Linked Cel)
  WORD      Frame position to link with
+ For cel type = 2 (Compressed Image)
  WORD      Width in pixels
  WORD      Height in pixels
  BYTE[]    'Raw Cel' data compressed with ZLIB method (see NOTE\&.3)
+ For cel type = 3 (Compressed Tilemap)
  WORD      Width in number of tiles
  WORD      Height in number of tiles
  WORD      Bits per tile (at the moment it's always 32-bit per tile)
  DWORD     Bitmask for tile ID (e\&.g\&. 0x1fffffff for 32-bit tiles)
  DWORD     Bitmask for X flip
  DWORD     Bitmask for Y flip
  DWORD     Bitmask for 90CW rotation
  BYTE[10]  Reserved
  TILE[]    Row by row, from top to bottom tile by tile
            compressed with ZLIB method (see NOTE\&.3)

.fi
.PP
 
.SS "Cel Extra Chunk (0x2006)"
Adds extra information to the latest read cel\&. 
.PP
.nf
DWORD       Flags (set to zero)
              1 = Precise bounds are set
FIXED       Precise X position
FIXED       Precise Y position
FIXED       Width of the cel in the sprite (scaled in real-time)
FIXED       Height of the cel in the sprite
BYTE[16]    For future use (set to zero)

.fi
.PP
 
.SS "Color Profile Chunk (0x2007)"
Color profile for RGB or grayscale values\&. 
.PP
.nf
WORD        Type
              0 - no color profile (as in old \&.aseprite files)
              1 - use sRGB
              2 - use the embedded ICC profile
WORD        Flags
              1 - use special fixed gamma
FIXED       Fixed gamma (1\&.0 = linear)
            Note: The gamma in sRGB is 2\&.2 in overall but it doesn't use
            this fixed gamma, because sRGB uses different gamma sections
            (linear and non-linear)\&. If sRGB is specified with a fixed
            gamma = 1\&.0, it means that this is Linear sRGB\&.
BYTE[8]     Reserved (set to zero)
+ If type = ICC:
  DWORD     ICC profile data length
  BYTE[]    ICC profile data\&. More info: http://www\&.color\&.org/ICC1V42\&.pdf

.fi
.PP
 
.SS "External Files Chunk (0x2008)"
\fBA\fP list of external files linked with this file can be found in the first frame\&. It might be used to reference external palettes, tilesets, or extensions that make use of extended properties\&. 
.PP
.nf
DWORD       Number of entries
BYTE[8]     Reserved (set to zero)
+ For each entry
  DWORD     Entry ID (this ID is referenced by tilesets, palettes, or extended properties)
  BYTE      Type
              0 - External palette
              1 - External tileset
              2 - Extension name for properties
  BYTE[7]   Reserved (set to zero)
  STRING    External file name or extension ID

.fi
.PP
 
.SS "Mask Chunk (0x2016) DEPRECATED"
.PP
.nf
SHORT       X position
SHORT       Y position
WORD        Width
WORD        Height
BYTE[8]     For future (set to zero)
STRING      Mask name
BYTE[]      Bit map data (size = height*((width+7)/8))
            Each byte contains 8 pixels (the leftmost pixels are
            packed into the high order bits)
.fi
.PP
 
.SS "Path Chunk (0x2017)"
Never used\&.
.SS "Tags Chunk (0x2018)"
After the tags chunk, you can write one user data chunk for each tag\&. E\&.g\&. if there are 10 tags, you can then write 10 user data chunks one for each tag\&. 
.PP
.nf
WORD        Number of tags
BYTE[8]     For future (set to zero)
+ For each tag
  WORD      From frame
  WORD      To frame
  BYTE      Loop animation direction
              0 = Forward
              1 = Reverse
              2 = Ping-pong
              3 = Ping-pong Reverse
  WORD      Repeat N times\&. Play this animation section N times:
              0 = Doesn't specify (plays infinite in UI, once on export,
                  for ping-pong it plays once in each direction)
              1 = Plays once (for ping-pong, it plays just in one direction)
              2 = Plays twice (for ping-pong, it plays once in one direction,
                  and once in reverse)
              n = Plays N times
  BYTE[6]   For future (set to zero)
  BYTE[3]   RGB values of the tag color
              Deprecated, used only for backward compatibility with Aseprite v1\&.2\&.x
              The color of the tag is the one in the user data field following
              the tags chunk
  BYTE      Extra byte (zero)
  STRING    Tag name

.fi
.PP
 
.SS "Palette Chunk (0x2019)"
.PP
.nf
DWORD       New palette size (total number of entries)
DWORD       First color index to change
DWORD       Last color index to change
BYTE[8]     For future (set to zero)
+ For each palette entry in [from,to] range (to-from+1 entries)
  WORD      Entry flags:
              1 = Has name
  BYTE      Red (0-255)
  BYTE      Green (0-255)
  BYTE      Blue (0-255)
  BYTE      Alpha (0-255)
  + If has name bit in entry flags
    STRING  Color name
.fi
.PP
 
.SS "User Data Chunk (0x2020)"
Insert this user data in the last read chunk\&. E\&.g\&. If we've read a layer, this user data belongs to that layer, if we've read a cel, it belongs to that cel, etc\&. There are some special cases: After a Tags chunk, there will be several user data fields, one for each tag, you should associate the user data in the same order as the tags are in the Tags chunk\&. Another special case is after the Tileset chunk, it could be followed by a user data chunk (empty or not) and then all the user data chunks of the tiles ordered by tile index, or it could be followed by none user data chunk if the file was created in an older Aseprite version\&. In version 1\&.3 a sprite has associated user data, to consider this case there is an User Data \fBChunk\fP at the first frame after the Palette \fBChunk\fP\&. 
.PP
.nf
DWORD       Flags
              1 = Has text
              2 = Has color
              4 = Has properties
+ If flags have bit 1
  STRING    Text
+ If flags have bit 2
  BYTE      Color Red (0-255)
  BYTE      Color Green (0-255)
  BYTE      Color Blue (0-255)
  BYTE      Color Alpha (0-255)
+ If flags have bit 4
  DWORD     Size in bytes of all properties maps stored in this chunk
  DWORD     Number of properties maps
  + For each properties map:
    DWORD     Properties maps key
              == 0 means user properties
              != 0 means an extension Entry ID (see External Files Chunk))
    DWORD     Number of properties
    + For each property:
      STRING    Name
      WORD      Type
      + If type==0x0001 (bool)
        BYTE    == 0 means FALSE
                != 0 means TRUE
      + If type==0x0002 (int8)
        BYTE
      + If type==0x0003 (uint8)
        BYTE
      + If type==0x0004 (int16)
        SHORT
      + If type==0x0005 (uint16)
        WORD
      + If type==0x0006 (int32)
        LONG
      + If type==0x0007 (uint32)
        DWORD
      + If type==0x0008 (int64)
        LONG64
      + If type==0x0009 (uint64)
        QWORD
      + If type==0x000A
        FIXED
      + If type==0x000B
        FLOAT
      + If type==0x000C
        DOUBLE
      + If type==0x000D
        STRING
      + If type==0x000E
        POINT
      + If type==0x000F
        SIZE
      + If type==0x0010
        RECT
      + If type==0x0011 (vector)
        DWORD     Number of elements
        WORD      Element's type
        BYTE[]    As many values as the number of elements indicates
                  Structure depends on the element's type
      + If type==0x0012 (nested properties map)
        DWORD     Number of properties
        BYTE[]    Nested properties data
                  Structure is the same as indicated in this loop

.fi
.PP
 
.SS "Slice Chunk (0x2022)"
.PP
.nf
DWORD       Number of 'slice keys'
DWORD       Flags
              1 = It's a 9-patches slice
              2 = Has pivot information
DWORD       Reserved
STRING      Name
+ For each slice key
  DWORD     Frame number (this slice is valid from
            this frame to the end of the animation)
  LONG      Slice X origin coordinate in the sprite
  LONG      Slice Y origin coordinate in the sprite
  DWORD     Slice width (can be 0 if this slice hidden in the
            animation from the given frame)
  DWORD     Slice height
  + If flags have bit 1
    LONG    Center X position (relative to slice bounds)
    LONG    Center Y position
    DWORD   Center width
    DWORD   Center height
  + If flags have bit 2
    LONG    Pivot X position (relative to the slice origin)
    LONG    Pivot Y position (relative to the slice origin)
.fi
.PP
 
.SS "Tileset Chunk (0x2023)"
.PP
.nf
DWORD       Tileset ID
DWORD       Tileset flags
              1 - Include link to external file
              2 - Include tiles inside this file
              4 - Tilemaps using this tileset use tile ID=0 as empty tile
                  (this is the new format)\&. In rare cases this bit is off,
                  and the empty tile will be equal to 0xffffffff (used in
                  internal versions of Aseprite)
DWORD       Number of tiles
WORD        Tile Width
WORD        Tile Height
SHORT       Base Index: Number to show in the screen from the tile with
            index 1 and so on (by default this is field is 1, so the data
            that is displayed is equivalent to the data in memory)\&. But it
            can be 0 to display zero-based indexing (this field isn't used
            for the representation of the data in the file, it's just for
            UI purposes)\&.
BYTE[14]    Reserved
STRING      Name of the tileset
+ If flag 1 is set
  DWORD     ID of the external file\&. This ID is one entry
            of the the External Files Chunk\&.
  DWORD     Tileset ID in the external file
+ If flag 2 is set
  DWORD     Compressed data length
  PIXEL[]   Compressed Tileset image (see NOTE\&.3):
              (Tile Width) x (Tile Height x Number of Tiles)
.fi
.PP
 
.SS "Notes"
.SS "NOTE\&.1"
The child level is used to show the relationship of this layer with the last one read, for example: 
.PP
.nf
Layer name and hierarchy      Child Level
-----------------------------------------------
- Background                  0
  `- Layer1                   1
- Foreground                  0
  |- My set1                  1
  |  `- Layer2                2
  `- Layer3                   1

.fi
.PP
 
.SS "NOTE\&.2"
The layer index is a number to identify any layer in the sprite, for example: 
.PP
.nf
Layer name and hierarchy      Layer index
-----------------------------------------------
- Background                  0
  `- Layer1                   1
- Foreground                  2
  |- My set1                  3
  |  `- Layer2                4
  `- Layer3                   5

.fi
.PP
 
.SS "NOTE\&.3"
Details about the ZLIB and DEFLATE compression methods:
.PP
.IP "\(bu" 2
https://www.ietf.org/rfc/rfc1950
.IP "\(bu" 2
https://www.ietf.org/rfc/rfc1951
.IP "\(bu" 2
Some extra notes that might help you to decode the data: http://george.chiramattel.com/blog/2007/09/deflatestream-block-length-does-not-match.html
.PP
.SH "File Format Changes"
.PP
.IP "1." 4
The first change from the first release of the new \&.ase format, is the new frame duration field\&. This is because now each frame can have different duration\&.
.PP
How to read both formats (old and new one)? You should set all frames durations to the 'speed' field read from the main ASE header\&. Then, if you found a frame with the frame-duration field > 0, you should update the duration of the frame with that value\&. 
.PP

