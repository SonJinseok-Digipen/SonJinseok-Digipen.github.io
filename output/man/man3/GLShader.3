.TH "GLShader" 3 "Wed Feb 1 2023" "Version Version 0.0" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GLShader
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP : GLenum { \fBVERTEX\fP = GL_VERTEX_SHADER, \fBFRAGMENT\fP = GL_FRAGMENT_SHADER, \fBGEOMETRY\fP = GL_GEOMETRY_SHADER, \fBTESSELLATION_CONTROL\fP = GL_TESS_CONTROL_SHADER, \fBTESSELLATION_EVALUATION\fP = GL_TESS_EVALUATION_SHADER, \fBCOMPUTE\fP = GL_COMPUTE_SHADER, \fBVERTEX\fP = GL_VERTEX_SHADER, \fBFRAGMENT\fP = GL_FRAGMENT_SHADER, \fBGEOMETRY\fP = GL_GEOMETRY_SHADER, \fBTESSELLATION_CONTROL\fP = GL_TESS_CONTROL_SHADER, \fBTESSELLATION_EVALUATION\fP = GL_TESS_EVALUATION_SHADER, \fBCOMPUTE\fP = GL_COMPUTE_SHADER }"
.br
.ti -1c
.RI "enum \fBTranspose\fP : GLboolean { \fBNO_TRANSPOSE\fP = GL_FALSE, \fBTRANSPOSE\fP = GL_TRUE, \fBNO_TRANSPOSE\fP = GL_FALSE, \fBTRANSPOSE\fP = GL_TRUE }"
.br
.ti -1c
.RI "enum \fBType\fP : GLenum { \fBVERTEX\fP = GL_VERTEX_SHADER, \fBFRAGMENT\fP = GL_FRAGMENT_SHADER, \fBGEOMETRY\fP = GL_GEOMETRY_SHADER, \fBTESSELLATION_CONTROL\fP = GL_TESS_CONTROL_SHADER, \fBTESSELLATION_EVALUATION\fP = GL_TESS_EVALUATION_SHADER, \fBCOMPUTE\fP = GL_COMPUTE_SHADER, \fBVERTEX\fP = GL_VERTEX_SHADER, \fBFRAGMENT\fP = GL_FRAGMENT_SHADER, \fBGEOMETRY\fP = GL_GEOMETRY_SHADER, \fBTESSELLATION_CONTROL\fP = GL_TESS_CONTROL_SHADER, \fBTESSELLATION_EVALUATION\fP = GL_TESS_EVALUATION_SHADER, \fBCOMPUTE\fP = GL_COMPUTE_SHADER }"
.br
.ti -1c
.RI "enum \fBTranspose\fP : GLboolean { \fBNO_TRANSPOSE\fP = GL_FALSE, \fBTRANSPOSE\fP = GL_TRUE, \fBNO_TRANSPOSE\fP = GL_FALSE, \fBTRANSPOSE\fP = GL_TRUE }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGLShader\fP (std::string_view shader_name, const std::initializer_list< std::pair< GLShader::Type, std::filesystem::path > > &shader_paths)"
.br
.ti -1c
.RI "\fBGLShader\fP (std::string_view shader_name, std::string_view vertex_shader_source, std::string_view fragment_shader_source)"
.br
.ti -1c
.RI "\fBGLShader\fP (const \fBGLShader\fP &)=delete"
.br
.ti -1c
.RI "\fBGLShader\fP (\fBGLShader\fP &&) noexcept"
.br
.ti -1c
.RI "\fBGLShader\fP & \fBoperator=\fP (const \fBGLShader\fP &)=delete"
.br
.ti -1c
.RI "\fBGLShader\fP & \fBoperator=\fP (\fBGLShader\fP &&) noexcept"
.br
.ti -1c
.RI "void \fBUse\fP (bool bind=true) const noexcept"
.br
.ti -1c
.RI "bool \fBIsValidWithVertexArrayObject\fP (unsigned int vertex_array_object_handle) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, bool \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, int \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 2 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 3 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y, float z) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 4 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y, float z, float w) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 2 *2 > mat, Transpose transpose) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 3 *3 > mat, Transpose transpose=NO_TRANSPOSE) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 4 *4 > mat, Transpose transpose=NO_TRANSPOSE) const"
.br
.ti -1c
.RI "\fBGLShader\fP (std::string_view shader_name, const std::initializer_list< std::pair< GLShader::Type, std::filesystem::path > > &shader_paths)"
.br
.ti -1c
.RI "\fBGLShader\fP (std::string_view shader_name, std::string_view vertex_shader_source, std::string_view fragment_shader_source)"
.br
.ti -1c
.RI "\fBGLShader\fP (const \fBGLShader\fP &)=delete"
.br
.ti -1c
.RI "\fBGLShader\fP (\fBGLShader\fP &&) noexcept"
.br
.ti -1c
.RI "\fBGLShader\fP & \fBoperator=\fP (const \fBGLShader\fP &)=delete"
.br
.ti -1c
.RI "\fBGLShader\fP & \fBoperator=\fP (\fBGLShader\fP &&) noexcept"
.br
.ti -1c
.RI "void \fBUse\fP (bool bind=true) const noexcept"
.br
.ti -1c
.RI "bool \fBIsValidWithVertexArrayObject\fP (unsigned int vertex_array_object_handle) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, bool \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, int \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 2 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 3 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y, float z) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 4 > \fBvalue\fP) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, float x, float y, float z, float w) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 2 *2 > mat, Transpose transpose) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 3 *3 > mat, Transpose transpose=NO_TRANSPOSE) const"
.br
.ti -1c
.RI "void \fBSendUniform\fP (std::string_view name, std::span< const float, 4 *4 > mat, Transpose transpose=NO_TRANSPOSE) const"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
